{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM4JjV2zDSVQMRCi/ar2JG9"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "VZvB8rITk7zU",
        "outputId": "fa90dfa6-cc92-4249-cef1-2c4dda962c2f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded successfully. Dimensions:(482, 5)\n",
            "The two dataframes are equal (T or F): False\n",
            "Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: []\n",
            "Number of duplicate rows: 0\n",
            "Number of rows after dropping duplicates: 384\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Level   T4       T3  T3adjusted  T4adjusted\n",
              "0      5  8.1  2.10000    2.008299    1.280579\n",
              "1      5  8.7  4.41998    2.056710    1.467960\n",
              "2     20  7.9  4.60000    1.991632    1.663103\n",
              "3     30  2.3  0.40000    1.320006    0.736806\n",
              "4     20  5.4  2.60000    1.754411    1.375069"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14321c22-5eb2-4810-af62-99d7f6075e32\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Level</th>\n",
              "      <th>T4</th>\n",
              "      <th>T3</th>\n",
              "      <th>T3adjusted</th>\n",
              "      <th>T4adjusted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>8.1</td>\n",
              "      <td>2.10000</td>\n",
              "      <td>2.008299</td>\n",
              "      <td>1.280579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>8.7</td>\n",
              "      <td>4.41998</td>\n",
              "      <td>2.056710</td>\n",
              "      <td>1.467960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>7.9</td>\n",
              "      <td>4.60000</td>\n",
              "      <td>1.991632</td>\n",
              "      <td>1.663103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.40000</td>\n",
              "      <td>1.320006</td>\n",
              "      <td>0.736806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.60000</td>\n",
              "      <td>1.754411</td>\n",
              "      <td>1.375069</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14321c22-5eb2-4810-af62-99d7f6075e32')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-14321c22-5eb2-4810-af62-99d7f6075e32 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-14321c22-5eb2-4810-af62-99d7f6075e32');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e1c7056d-5823-48f0-ace3-ea34eae6fe3b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1c7056d-5823-48f0-ace3-ea34eae6fe3b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e1c7056d-5823-48f0-ace3-ea34eae6fe3b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filled_no_duplicates",
              "summary": "{\n  \"name\": \"df_filled_no_duplicates\",\n  \"rows\": 384,\n  \"fields\": [\n    {\n      \"column\": \"Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 5,\n        \"max\": 400,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          25,\n          400,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.3456221944427,\n        \"min\": -13.6,\n        \"max\": 41.4,\n        \"num_unique_values\": 316,\n        \"samples\": [\n          0.444444444,\n          2.2,\n          6.608\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.910619237535029,\n        \"min\": -4.5,\n        \"max\": 42.3,\n        \"num_unique_values\": 271,\n        \"samples\": [\n          2.0,\n          33.2,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3adjusted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6399761426222788,\n        \"min\": -2.386966384,\n        \"max\": 3.459394684,\n        \"num_unique_values\": 316,\n        \"samples\": [\n          0.763142828,\n          1.300591447,\n          1.876535039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4adjusted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6799453335402628,\n        \"min\": -1.650963624,\n        \"max\": 3.484283271,\n        \"num_unique_values\": 271,\n        \"samples\": [\n          1.25992105,\n          3.214001151,\n          3.096840346\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"CS5901_assignment2_stage1_data_cleaning.py\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 1**\n",
        "*This .py file provides functions for data cleaning the CSV file*\n",
        "\n",
        "### **Stage 1.1** - Import Data\n",
        "*Import the CSV file from Git Repo and load into a Pandas data frame.*\n",
        "\"\"\"\n",
        "\n",
        "# Initialize Google Drive when saved to G-Drive\n",
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "def import_data(file_path):\n",
        "  \"\"\"\n",
        "  This function imports data from a CSV file and load it into a Pandas DataFrame\n",
        "\n",
        "  Args:\n",
        "    file_path: location path of the CSV file\n",
        "  Returns:\n",
        "    df: a Pandas dataframe of the data in the CSV file\n",
        "    else: print error message\n",
        "  \"\"\"\n",
        "\n",
        "  #load CSV file in a Pandas dataframe using tab delimiter\n",
        "  try:\n",
        "    df_loaded = pd.read_csv(file_path, delimiter='\\t')\n",
        "    print(f\"Data loaded successfully. Dimensions:{df_loaded.shape}\")\n",
        "    return df_loaded\n",
        "  except Exception as e:\n",
        "    print(f\"Error loading data: {e}\")\n",
        "    return None\n",
        "\n",
        "# File path of CSV file in Google-Drive\n",
        "#file_path = '/content/drive/My Drive/P2data6332.csv'\n",
        "\n",
        "#GitHub filepath\n",
        "file_path = 'https://raw.githubusercontent.com/jsp289/CS5901_Assignment2/refs/heads/main/P2data6332.csv'\n",
        "\n",
        "df =  import_data(file_path)\n",
        "df.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stages 1.2 - Remove Nonsensical Rows\n",
        "*Here we drop negative values and outliers.*\n",
        "\"\"\"\n",
        "\n",
        "def remove_nonsensical_rows(df):\n",
        "  \"\"\"\n",
        "  This function removes negative values and outliers using the interquartile range method\n",
        "  from the data frame generated in Stage 1.1\n",
        "\n",
        "  Args:\n",
        "    df: the Pandas dataframe generated in Stage 1.1\n",
        "  Returns:\n",
        "    df_cleaned: a Pandas dataframe with negative values and outliers removed\n",
        "    nonsensical_data: a Pandas dataframe with negative values and outliers\n",
        "  \"\"\"\n",
        "\n",
        "  # Identify negative values in columns\n",
        "  negative_rows = df[(df[['T3','T4','T3adjusted','T4adjusted']]<0).any(axis=1)]\n",
        "\n",
        "  #return negative_rows\n",
        "\n",
        "#nonsensical_data = remove_nonsensical_rows(df)\n",
        "#nonsensical_data.shape\n",
        "#nonsensical_data.head()\n",
        "\n",
        "  # Identify outliers with the IQR method\n",
        "  Q1 = df[['T3','T4','T3adjusted','T4adjusted']].quantile(0.25)\n",
        "  Q3 = df[['T3','T4','T3adjusted','T4adjusted']].quantile(0.75)\n",
        "  IQR = Q3 - Q1\n",
        "\n",
        "  #Calculate outlier boundaries\n",
        "  lower_bound = Q1 - 1.5 * IQR\n",
        "  upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "  #Isolate outlier rows\n",
        "  outlier_rows = df.loc[((df[['T3','T4','T3adjusted','T4adjusted']] < lower_bound)|\n",
        "                     (df[['T3','T4','T3adjusted','T4adjusted']] > upper_bound)).any(axis=1)]\n",
        "\n",
        "  #return outlier_rows\n",
        "\n",
        "#nonsensical_data = remove_nonsensical_rows(df)\n",
        "#nonsensical_data.shape\n",
        "#nonsensical_data.head()\n",
        "\n",
        "  #Combine negative and outlier rows\n",
        "  invalid_rows = pd.concat([negative_rows, outlier_rows]).drop_duplicates()\n",
        "\n",
        "  #Drop invalid rows and duplicates\n",
        "  df_cleaned = df.drop(invalid_rows.index).drop_duplicates()\n",
        "\n",
        "  return df_cleaned, invalid_rows\n",
        "\n",
        "df_cleaned, invalid_rows = remove_nonsensical_rows(df)\n",
        "df_cleaned.shape\n",
        "#invalid_rows.shape\n",
        "df_cleaned.head()\n",
        "#invalid_rows.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.3 - Replace Missing Values\n",
        "*Here we replace missing values in T3 and T4 by their average.*\n",
        "\"\"\"\n",
        "\n",
        "def replace_missing_values(df):\n",
        "  \"\"\"\n",
        "  This function replaces missing values in T3,T4, T3adjusted, T4adjusted by their average\n",
        "  from the cleaned dataframe generated in Stage 1.2\n",
        "\n",
        "  Args:\n",
        "    df: the cleaned Pandas dataframe generated in Stage 1.2\n",
        "  Returns:\n",
        "    df_filled: a cleaned Pandas dataframe where the missing values in T3 and T4 are replaced\n",
        "    by their average.\n",
        "  \"\"\"\n",
        "\n",
        "  #Calculate the averages of columns T3,T4, T3adjusted, T4adjusted\n",
        "  col_means = df.groupby(\"Level\")[[\"T3\",\"T4\",\"T3adjusted\",\"T4adjusted\"]].mean()\n",
        "\n",
        "  #Replace missing values in Stage 1.2 with corresponding values from col_means\n",
        "  df_filled = df.copy()\n",
        "  df_filled[\"T3\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T3\"] if pd.isna(row[\"T3\"]) else row[\"T3\"], axis=1)\n",
        "  df_filled[\"T4\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T4\"] if pd.isna(row[\"T4\"]) else row[\"T4\"], axis=1)\n",
        "  df_filled[\"T3adjusted\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T3adjusted\"] if pd.isna(row[\"T3adjusted\"]) else row[\"T3adjusted\"], axis=1)\n",
        "  df_filled[\"T4adjusted\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T4adjusted\"] if pd.isna(row[\"T4adjusted\"]) else row[\"T4adjusted\"], axis=1)\n",
        "\n",
        "  return df_filled\n",
        "\n",
        "df_filled = replace_missing_values(df_cleaned)\n",
        "df_filled.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.4 - Calculate Descriptive Statistics Without Pandas\n",
        "*Here we compute descriptive statistics manually and compare results against and compare against the pd.describe() method.*\n",
        "\"\"\"\n",
        "\n",
        "def calculate_stats(df):\n",
        "  \"\"\"\n",
        "  This function computes descriptive statistics manually and compare results against and compare against the pd.describe() method\n",
        "  from the filled dataframe generated in Stage 1.3\n",
        "\n",
        "  Args:\n",
        "    df: the filled Pandas dataframe generated in Stage 1.3\n",
        "  Returns:\n",
        "    manual_stats: a Pandas dataframe with descriptive statistics computed manually\n",
        "    pd_stats: a Pandas dataframe with descriptive statistics computed using pd.describe()\n",
        "  \"\"\"\n",
        "  #Create the dataframe for manual_stats\n",
        "  manual_stats = pd.DataFrame()\n",
        "\n",
        "  #Compute stats manually and populate manual_stats dataframe\n",
        "  manual_stats[\"count\"] = df.count()\n",
        "  manual_stats[\"mean\"] = df.mean()\n",
        "  manual_stats[\"std\"] = df.std()\n",
        "  manual_stats[\"min\"] = df.min()\n",
        "  manual_stats[\"25%\"] = df.quantile(0.25)\n",
        "  manual_stats[\"50%\"] = df.quantile(0.5)\n",
        "  manual_stats[\"75%\"] = df.quantile(0.75)\n",
        "  manual_stats[\"max\"] = df.max()\n",
        "\n",
        "  #Transpose manual_stats to match Pandas formatting\n",
        "  manual_stats = manual_stats.transpose()\n",
        "  pd_stats = df.describe()\n",
        "\n",
        "  print(\"The two dataframes are equal (T or F):\", manual_stats.equals(pd_stats))\n",
        "  return manual_stats, pd_stats\n",
        "\n",
        "\n",
        "manual_stats = calculate_stats(df_filled)\n",
        "manual_stats\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.5 - Identify Duplicate Rows\n",
        "*Here we identify and confirm the existence of duplicate rows in df_filled*\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "def duplicate_rows(df):\n",
        "  \"\"\"\n",
        "  This function identifies and confirms the existence of duplicate rows in df_filled and drops them.\n",
        "\n",
        "  Args:\n",
        "    df: the df_filled Pandas dataframe generated in Stage 1.3\n",
        "  Returns:\n",
        "    duplicate_data: a Pandas dataframe with duplicate rows\n",
        "    df_filled_no_duplicates: a Pandas dataframe with duplicate rows removed\n",
        "  \"\"\"\n",
        "\n",
        "  #Create dataframe for duplicate rows\n",
        "  duplicate_data = df_filled[df_filled.duplicated()]\n",
        "  print(duplicate_data)\n",
        "  print(f\"Number of duplicate rows: {duplicate_data.shape[0]}\")\n",
        "\n",
        "  #Create dataframe without duplicate rows\n",
        "  df_filled_no_duplicates = df_filled.drop_duplicates()\n",
        "  print(f\"Number of rows after dropping duplicates: {df_filled_no_duplicates.shape[0]}\")\n",
        "\n",
        "  return duplicate_data, df_filled_no_duplicates\n",
        "\n",
        "\n",
        "duplicate_data, df_filled_no_duplicates = duplicate_rows(df_filled)\n",
        "df_filled_no_duplicates.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"CS5901_assignment2_stage2_time_space_complexity.py\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 2**\n",
        "*This .py file provides functions to calculate the time and space complexity for:*\n",
        "\n",
        "1.   Standard Matrix Multiplication\n",
        "2.   Unordered List of Integers\n",
        "3.   Substring Find() Method vs. Loop italicized text\n",
        "\n",
        "---\n",
        "\n",
        "### **Stage 2.1** - Standard Matrix Multiplication Space-Time Complexity\n",
        "*Here we multiply a random integer matrix by a random float matrix of increasing size and compare their time and space complexities using a scatter plot.*\n",
        "\"\"\"\n",
        "\n",
        "#Import all libraries required for space-time complexity analysis\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import gc\n",
        "import psutil\n",
        "import os\n",
        "import sys\n",
        "import string\n",
        "import random\n",
        "\n",
        "def matrix_multiplication(size):\n",
        "  \"\"\"\n",
        "  This function identifies multiplies 2 square matrices and computes space and time required to compute.\n",
        "\n",
        "  Args:\n",
        "    size (int): size of the square matrix\n",
        "  Returns:\n",
        "    run_time (float): time required to compute\n",
        "    mem_usage (float): space required to compute\n",
        "  \"\"\"\n",
        "  #Initiate random integer matrices\n",
        "  A = np.random.randint(1, 50000, size=(size, size))\n",
        "  B = np.random.randint(1, 50000, size=(size, size))\n",
        "\n",
        "  # Initiate space & time baselines\n",
        "  start_time = time.time()\n",
        "  process = psutil.Process(os.getpid())\n",
        "  base_mem = process.memory_info().rss\n",
        "\n",
        "  # Matrix multiplication\n",
        "  final_mat = np.dot(A, B)\n",
        "\n",
        "  #Compute running time and memory usage\n",
        "  end_time = time.time()\n",
        "  mem_usage = process.memory_info().rss - base_mem\n",
        "  run_time = end_time - start_time\n",
        "\n",
        "  return run_time, mem_usage\n",
        "print(matrix_multiplication(400))\n",
        "\n",
        "\"\"\"### **Stage 2.2** - Ordering Integers\n",
        "*Here we have a matrix of unordered integers, we flatten it, sort the elements from smallest to largest, and compute the space and time complexity of the sorting process*\n",
        "\"\"\"\n",
        "\n",
        "def inneficient_integer_sort(size):\n",
        "  \"\"\"\n",
        "  This function generates a random matrix of integers, stores it in a list, and sorts them in ascending order.\n",
        "\n",
        "  Args:\n",
        "    size (int): size of the square matrix\n",
        "  Returns:\n",
        "    run_time (float): time required to compute\n",
        "    mem_usage (float): space required to compute\n",
        "  \"\"\"\n",
        "  #Generate random matrix and store in list\n",
        "  lst_rand_ints = np.random.randint(1,50000,size).tolist()\n",
        "  start = time.time()\n",
        "  process = psutil.Process(os.getpid())\n",
        "  base_mem = process.memory_info().rss\n",
        "\n",
        "  #Inneficient sort\n",
        "  sorted_lst_rand_ints = []\n",
        "  while lst_rand_ints:\n",
        "    min = lst_rand_ints[0]\n",
        "    for rand_int in lst_rand_ints:\n",
        "      if rand_int < min:\n",
        "        min = rand_int\n",
        "    sorted_lst_rand_ints.append(min)\n",
        "    lst_rand_ints.remove(min)\n",
        "\n",
        "  #Compute space and time complexity of inneficient sort\n",
        "  end = time.time()\n",
        "  mem_usage = process.memory_info().rss - base_mem\n",
        "  run_time = end - start\n",
        "\n",
        "  return run_time, mem_usage\n",
        "print(inneficient_integer_sort(5000))\n",
        "\n",
        "\"\"\"### **Stage 2.3** - String Find Method vs Manual Method\n",
        "*Here we generate a random string and compare the space-time complexity of manual sort vs the string.find() method*\n",
        "\"\"\"\n",
        "\n",
        "def string_search_comparison(text,char):\n",
        "  \"\"\"\n",
        "  This function compares time of manual string search vs the string.find() method\n",
        "\n",
        "  Args:\n",
        "    text (str): a random string\n",
        "    char (str): a random character or substring\n",
        "  Returns:\n",
        "    str_find_time (float): time required to compute string.find() method\n",
        "    manual_find_time (float): time required to compute manual search\n",
        "\n",
        "  \"\"\"\n",
        "  # Str.find() time\n",
        "  start_find = time.time()\n",
        "  find_result = text.find(char)\n",
        "  end_find = time.time()\n",
        "  str_find_time = end_find - start_find\n",
        "\n",
        "  # Manual search time (the loop breaks when it finds the substring)\n",
        "  start_manual = time.time()\n",
        "  manual_count = -1\n",
        "  for i in range(len(text)-len(char)+1):\n",
        "    if text[i:i + len(char)] == char:\n",
        "      manual_count =1\n",
        "      break\n",
        "  end_manual = time.time()\n",
        "  manual_find_time = end_manual - start_manual\n",
        "\n",
        "  return str_find_time, manual_find_time\n",
        "\n",
        "\n",
        "text = \"a\" * 10000 + \"b\" + \"ab\" * 10000\n",
        "char = \"ab\"\n",
        "find_t, manual_t = string_search_comparison(text, char)\n",
        "print(f\"String.find() method time: {find_t}\")\n",
        "print(f\"Manual search time: {manual_t}\")\n",
        "\n",
        "\"\"\"### **Stage 2.4** - Summary Analysis\n",
        "*Here we analyze the space-time complexity for all algorithms implemented for stages 2.1 to 2.3*\n",
        "\"\"\"\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def complexity_analysis(sizes=[100,500,1000]):\n",
        "  \"\"\"\n",
        "  This function compares time of manual string search vs the string.find() method\n",
        "\n",
        "  Args:\n",
        "    sizes (lst): a list of input sizes for testing\n",
        "\n",
        "  Returns:\n",
        "    tuple (results_dict, sizes_tested)\n",
        "\n",
        "  \"\"\"\n",
        "  #Initiate dictionary to store test results\n",
        "\n",
        "  results = {'matrix_mult':{'time':[],'space':[]},\n",
        "             'integer_sort':{'time':[],'space':[]}}\n",
        "\n",
        "  for size in sizes:\n",
        "    #clear memory before each test\n",
        "    gc.collect()\n",
        "\n",
        "    #test for matrix multiplixation\n",
        "    t,s = matrix_multiplication(size)\n",
        "    results['matrix_mult']['time'].append(t)\n",
        "    results['matrix_mult']['space'].append(s)\n",
        "\n",
        "    #test for inneficient integer sort\n",
        "    t,s = inneficient_integer_sort(size)\n",
        "    results['integer_sort']['time'].append(t)\n",
        "    results['integer_sort']['space'].append(s)\n",
        "\n",
        "  #test for string search\n",
        "  text = \"a\" * 10000 + \"b\" + \"ab\" * 10000\n",
        "  char = \"ab\"\n",
        "  str_find_time, manual_find_time = string_search_comparison(text, char)\n",
        "  results['string_search'] = {'time':[str_find_time, manual_find_time]}\n",
        "\n",
        "  return results, sizes\n",
        "\n",
        "# Call and print results\n",
        "results, sizes = complexity_analysis(sizes=[100, 500, 1000])\n",
        "print(\"\\nComplexity Analysis Results:\")\n",
        "for algorithm, data in results.items():\n",
        "    print(f\"\\n{algorithm}:\")\n",
        "    for metric, values in data.items():\n",
        "        print(f\"  {metric}: {values}\")\n",
        "print(\"\\nSizes Tested:\", sizes)\n",
        "\n",
        "# Create scatter plots\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))  # 1 row, 2 columns\n",
        "\n",
        "# Time Complexity Plot\n",
        "ax1.scatter(sizes, results['matrix_mult']['time'], label='Matrix Multiplication')\n",
        "ax1.scatter(sizes, results['integer_sort']['time'], label='Integer Sort')\n",
        "ax1.set_xlabel('Input Size')\n",
        "ax1.set_ylabel('Time (seconds)')\n",
        "ax1.set_title('Time Complexity')\n",
        "ax1.legend()\n",
        "\n",
        "# Space Complexity Plot\n",
        "ax2.scatter(sizes, results['matrix_mult']['space'], label='Matrix Multiplication')\n",
        "ax2.scatter(sizes, results['integer_sort']['space'], label='Integer Sort')\n",
        "ax2.set_xlabel('Input Size')\n",
        "ax2.set_ylabel('Space (bytes)')\n",
        "ax2.set_title('Space Complexity')\n",
        "ax2.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 937
        },
        "id": "Q3cfGNJ7l1uU",
        "outputId": "ede6365d-616c-4de9-c863-536402e9c64e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(0.0950307846069336, 0)\n",
            "(0.3600316047668457, 0)\n",
            "String.find() method time: 1.4066696166992188e-05\n",
            "Manual search time: 0.0013842582702636719\n",
            "\n",
            "Complexity Analysis Results:\n",
            "\n",
            "matrix_mult:\n",
            "  time: [0.0016946792602539062, 0.17589044570922852, 1.4408941268920898]\n",
            "  space: [0, 1888256, 8171520]\n",
            "\n",
            "integer_sort:\n",
            "  time: [0.0002887248992919922, 0.0037550926208496094, 0.014629125595092773]\n",
            "  space: [0, 0, 0]\n",
            "\n",
            "string_search:\n",
            "  time: [1.5020370483398438e-05, 0.001367330551147461]\n",
            "\n",
            "Sizes Tested: [100, 500, 1000]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"GitHub_git_log.ipynb\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 0**\n",
        "*This .py file contains the module for local git and GitHub repository management operations*\n",
        "\"\"\"\n",
        "\n",
        "import os\n",
        "import subprocess\n",
        "import tempfile\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import io\n",
        "\n",
        "\n",
        "# Here, we default to GitHub. To revert to a local git repo uncomment the docstring section below.\n",
        "'''\n",
        "def init_repo(directory, remote_url = None):\n",
        "  \"\"\"\n",
        "  Initialize a local git repo and GitHub remote setup\n",
        "\n",
        "  Args:\n",
        "    directory (str): path to the working directory\n",
        "    remote_url(str, optional): GitHub repo remote URL\n",
        "\n",
        "  Returns:\n",
        "    None\n",
        "  \"\"\"\n",
        "\n",
        "  #Verify if git repo already exists\n",
        "  if not os.path.exists(os.path.join(directory, '.git')):\n",
        "\n",
        "    #Initialize new git repo\n",
        "    subprocess.run(['git', 'init'], cwd = directory, check = True)\n",
        "\n",
        "    #Create .gitignore file with exclusions\n",
        "    with open(os.path.join(directory, '.gitignore'), 'w') as f:\n",
        "      f.write('*csv\\n__pycache__/\\n*.ipynb_checkpoints/')\n",
        "\n",
        "    #Stage and commit .gitignore\n",
        "    subprocess.run(['git', 'add', '.gitignore'], cwd = directory, check = True)\n",
        "    subprocess.run(['git', 'commit', '-m', 'Initial commit'], cwd = directory, check = True)\n",
        "\n",
        "    #Set up remote GitHub repo if URL is provided\n",
        "    if remote_url:\n",
        "      subprocess.run(['git', 'remote', 'add', 'origin', remote_url], cwd = directory, check = True)\n",
        "\n",
        "\n",
        "def commit_changes(directory, message):\n",
        "  \"\"\"\n",
        "  Commit changes to the local git repo and push to GitHub\n",
        "\n",
        "  Args:\n",
        "    directory (str): path to the working directory\n",
        "    message (str): commit message\n",
        "\n",
        "  Returns:\n",
        "    None\n",
        "  \"\"\"\n",
        "\n",
        "  #Stage and commit changes\n",
        "  subprocess.run(['git', 'add', '.'], cwd = directory, check = True)\n",
        "\n",
        "  #Commit with message\n",
        "  subprocess.run(['git', 'commit', '-m', message], cwd = directory, check = True)\n",
        "\n",
        "  #Push changes to GitHub (origin must be set)\n",
        "  try:\n",
        "    subprocess.run(['git', 'push', 'origin', 'main'], cwd = directory, check = True)\n",
        "  except:\n",
        "    print(\"Failed to push to GitHub. Ensure remote is configured and authenticated.\")\n",
        "'''\n",
        "\n",
        "def get_git_log_dataframe(repo_url):\n",
        "    \"\"\"\n",
        "    Clones a Git repository, extracts the log, and returns it as a pandas DataFrame.\n",
        "\n",
        "    Args:\n",
        "        repo_url (str): The URL of the Git repository.\n",
        "\n",
        "    Returns:\n",
        "        pd.DataFrame: A DataFrame containing the git log.\n",
        "    \"\"\"\n",
        "    temp_dir = tempfile.mkdtemp()\n",
        "    print(f\"Created temporary directory: {temp_dir}\")\n",
        "\n",
        "    try:\n",
        "        # Clone the repository\n",
        "        print(f\"Cloning repository from {repo_url}...\")\n",
        "        subprocess.run([\"git\", \"clone\", repo_url, temp_dir], check=True)\n",
        "\n",
        "        # Change to the repository directory\n",
        "        os.chdir(temp_dir)\n",
        "\n",
        "        # Extract the git log\n",
        "        print(\"Extracting git log...\")\n",
        "        log_format = \"%h%x09%an%x09%ad%x09%s\"\n",
        "        result = subprocess.run(\n",
        "            [\"git\", \"log\", f\"--pretty=format:{log_format}\"],\n",
        "            capture_output=True,\n",
        "            text=True,\n",
        "            check=True\n",
        "        )\n",
        "        git_log_content = result.stdout\n",
        "\n",
        "        # Read the git log content into a pandas DataFrame\n",
        "        log_data = io.StringIO(git_log_content)\n",
        "        df = pd.read_csv(log_data, sep='\\t', header=None, names=['Commit Hash', 'Author', 'Date', 'Subject'])\n",
        "\n",
        "        # Display the DataFrame as a table\n",
        "        print(\"Git log in table format:\")\n",
        "        display(df)\n",
        "\n",
        "        # Read the entire file for download (using the content already captured)\n",
        "        content = git_log_content\n",
        "\n",
        "        return df\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n",
        "        return None\n",
        "\n",
        "# Validate usage:\n",
        "repo_url = \"https://github.com/jsp289/CS5901_Assignment2.git\"\n",
        "git_log_df = get_git_log_dataframe(repo_url)\n",
        "\n",
        "if git_log_df is not None:\n",
        "    print(\"\\nDataFrame returned by the function:\")\n",
        "    display(git_log_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 717
        },
        "id": "o51vMmtumeHd",
        "outputId": "2805cfbf-fa56-4f3c-886b-471e856f78eb"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created temporary directory: /tmp/tmpigszebov\n",
            "Cloning repository from https://github.com/jsp289/CS5901_Assignment2.git...\n",
            "Extracting git log...\n",
            "Git log in table format:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Commit Hash  Author                            Date  \\\n",
              "0      e97c56f  jsp289  Tue May 20 18:28:20 2025 -0400   \n",
              "1      675c662  jsp289  Tue May 20 18:16:38 2025 -0400   \n",
              "2      411c9c6  jsp289  Tue May 20 18:14:55 2025 -0400   \n",
              "3      e53df05  jsp289  Tue May 20 18:13:44 2025 -0400   \n",
              "4      15cc3e3  jsp289  Tue May 20 18:12:54 2025 -0400   \n",
              "..         ...     ...                             ...   \n",
              "61     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
              "62     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
              "63     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
              "64     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
              "65     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
              "\n",
              "                                              Subject  \n",
              "0            Delete Assignment_2_Unified_Pyfile_py.py  \n",
              "1                 Stage 0 - Get GitHub commit history  \n",
              "2                         Delete GitHub_git_log.ipynb  \n",
              "3   Unified Py file containing stages 0-2 & main_r...  \n",
              "4         Delete Assignment_2_Unified_Pyfile_py.ipynb  \n",
              "..                                                ...  \n",
              "61  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
              "62                Stage 1.3 - Replace missing values.  \n",
              "63  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
              "64  Stage 1.1 - Import CSV data and load in Pandas...  \n",
              "65                               Add files via upload  \n",
              "\n",
              "[66 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7be3c80-eb9b-40c7-9f52-333c11ece88f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e97c56f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:28:20 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>675c662</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:16:38 2025 -0400</td>\n",
              "      <td>Stage 0 - Get GitHub commit history</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>411c9c6</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:14:55 2025 -0400</td>\n",
              "      <td>Delete GitHub_git_log.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e53df05</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:13:44 2025 -0400</td>\n",
              "      <td>Unified Py file containing stages 0-2 &amp; main_r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15cc3e3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:12:54 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>20cebef</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:17:57 2025 -0400</td>\n",
              "      <td>Stage 1.4 - Calculate Descriptive Statistics W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>12e6e91</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sat Mar 22 13:23:19 2025 -0400</td>\n",
              "      <td>Stage 1.3 - Replace missing values.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>fd5043e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 13:38:44 2025 -0400</td>\n",
              "      <td>Stage 1.2.1. - Remove negative &amp; outlier rows ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>3fef242</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 12:55:28 2025 -0400</td>\n",
              "      <td>Stage 1.1 - Import CSV data and load in Pandas...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>741ccd3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 16 18:51:36 2025 -0400</td>\n",
              "      <td>Add files via upload</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>66 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7be3c80-eb9b-40c7-9f52-333c11ece88f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e7be3c80-eb9b-40c7-9f52-333c11ece88f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e7be3c80-eb9b-40c7-9f52-333c11ece88f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-57b70a9a-94dd-413a-8cbe-570d8c2289ef\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-57b70a9a-94dd-413a-8cbe-570d8c2289ef')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-57b70a9a-94dd-413a-8cbe-570d8c2289ef button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(git_log_df\",\n  \"rows\": 66,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"0ba7260\",\n          \"12e6e91\",\n          \"e97c56f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"Fri Apr 4 08:47:29 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 53,\n        \"samples\": [\n          \"Delete CS5901_assignment2_get_utils_py_py.ipynb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame returned by the function:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Commit Hash  Author                            Date  \\\n",
              "0     e97c56f  jsp289  Tue May 20 18:28:20 2025 -0400   \n",
              "1     675c662  jsp289  Tue May 20 18:16:38 2025 -0400   \n",
              "2     411c9c6  jsp289  Tue May 20 18:14:55 2025 -0400   \n",
              "3     e53df05  jsp289  Tue May 20 18:13:44 2025 -0400   \n",
              "4     15cc3e3  jsp289  Tue May 20 18:12:54 2025 -0400   \n",
              "\n",
              "                                             Subject  \n",
              "0           Delete Assignment_2_Unified_Pyfile_py.py  \n",
              "1                Stage 0 - Get GitHub commit history  \n",
              "2                        Delete GitHub_git_log.ipynb  \n",
              "3  Unified Py file containing stages 0-2 & main_r...  \n",
              "4        Delete Assignment_2_Unified_Pyfile_py.ipynb  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36b39e5f-cd69-414a-9db3-90662371a02d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e97c56f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:28:20 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>675c662</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:16:38 2025 -0400</td>\n",
              "      <td>Stage 0 - Get GitHub commit history</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>411c9c6</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:14:55 2025 -0400</td>\n",
              "      <td>Delete GitHub_git_log.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e53df05</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:13:44 2025 -0400</td>\n",
              "      <td>Unified Py file containing stages 0-2 &amp; main_r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15cc3e3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:12:54 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.ipynb</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36b39e5f-cd69-414a-9db3-90662371a02d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-36b39e5f-cd69-414a-9db3-90662371a02d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-36b39e5f-cd69-414a-9db3-90662371a02d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-00a385a9-174e-45f4-a0ce-474f30355079\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-00a385a9-174e-45f4-a0ce-474f30355079')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-00a385a9-174e-45f4-a0ce-474f30355079 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(git_log_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"675c662\",\n          \"15cc3e3\",\n          \"411c9c6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Tue May 20 18:16:38 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Stage 0 - Get GitHub commit history\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Main_run_demo Function**\n",
        "*This .py file coordinates function calls for the following with GitHub version control from the Python Notebook:*\n",
        "\n",
        "\n",
        "1. Stage 0 - Clone GitHub repo and extract commit history\n",
        "2.   Stage 1 - Loading CSV into Pandas DataFrame, Cleaning Data, and Basic Stats\n",
        "3.   Stage 2 - Calculating the Space-Time Complexity of Several Algorithms\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "By6D94fuqILs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def main_run_demo(file_path, repo_url):\n",
        "    \"\"\"\n",
        "    Executes Stages 0 to 2  of the Demo module with GitHub version control\n",
        "\n",
        "    Args:\n",
        "      file_path (str): url to the csv file\n",
        "      repo_url (str): url to the GitHub repo\n",
        "\n",
        "    Returns:\n",
        "      dict: results of stages 0 to 2 with associated commit messages\n",
        "    \"\"\"\n",
        "\n",
        "    # Stage 0: Get GitHub Commit History\n",
        "    git_log_df = get_git_log_dataframe(repo_url)\n",
        "\n",
        "    #Stage 1: Loading CSV and Cleaning Data:\n",
        "    df = import_data(file_path)\n",
        "    df_cleaned, invalid_rows = remove_nonsensical_rows(df)\n",
        "    df_filled = replace_missing_values(df_cleaned)\n",
        "    manual_stats, pd_stats = calculate_stats(df_filled)\n",
        "    duplicate_data, df_filled_no_duplicates = duplicate_rows(df_filled)\n",
        "\n",
        "    #Stage 2: Space & Time Complexity Analysis\n",
        "    complexity_results, sizes = complexity_analysis(sizes=[100, 500, 1000])\n",
        "\n",
        "    return {\n",
        "        \"clean_data\": df_filled,\n",
        "        \"manual_stats\": manual_stats,\n",
        "        \"pandas_stats\": pd_stats,\n",
        "        \"duplicates\": (duplicate_data,df_filled_no_duplicates),\n",
        "        \"complexity\": (complexity_results,sizes),\n",
        "        \"git_log\": git_log_df,\n",
        "    }\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "  #GitHub info\n",
        "  file_path = 'https://raw.githubusercontent.com/jsp289/CS5901_Assignment2/refs/heads/main/P2data6332.csv'\n",
        "  repo_url = \"https://github.com/jsp289/CS5901_Assignment2.git\"\n",
        "\n",
        "\n",
        "  results = main_run_demo(file_path, repo_url)\n",
        "\n",
        "  #Verify Dict Output of main_run_demo function\n",
        "  print(\"Data loaded and cleaned successfully.\")\n",
        "  print(f\"Duplicates: {results['duplicates']}\")\n",
        "  print(f\"Manual Stats: {results['manual_stats']}\")\n",
        "  print(f\"Pandas Stats: {results['pandas_stats']}\")\n",
        "  print(f\"Complexity Results: {results['complexity']}\")\n",
        "  print(f\"Git Log: {results['git_log']}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6pyI8YsDOS7D",
        "outputId": "9f7794fd-0486-4542-c0b6-8b10aac34f12"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created temporary directory: /tmp/tmpax3ir166\n",
            "Cloning repository from https://github.com/jsp289/CS5901_Assignment2.git...\n",
            "Extracting git log...\n",
            "Git log in table format:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Commit Hash  Author                            Date  \\\n",
              "0      e97c56f  jsp289  Tue May 20 18:28:20 2025 -0400   \n",
              "1      675c662  jsp289  Tue May 20 18:16:38 2025 -0400   \n",
              "2      411c9c6  jsp289  Tue May 20 18:14:55 2025 -0400   \n",
              "3      e53df05  jsp289  Tue May 20 18:13:44 2025 -0400   \n",
              "4      15cc3e3  jsp289  Tue May 20 18:12:54 2025 -0400   \n",
              "..         ...     ...                             ...   \n",
              "61     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
              "62     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
              "63     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
              "64     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
              "65     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
              "\n",
              "                                              Subject  \n",
              "0            Delete Assignment_2_Unified_Pyfile_py.py  \n",
              "1                 Stage 0 - Get GitHub commit history  \n",
              "2                         Delete GitHub_git_log.ipynb  \n",
              "3   Unified Py file containing stages 0-2 & main_r...  \n",
              "4         Delete Assignment_2_Unified_Pyfile_py.ipynb  \n",
              "..                                                ...  \n",
              "61  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
              "62                Stage 1.3 - Replace missing values.  \n",
              "63  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
              "64  Stage 1.1 - Import CSV data and load in Pandas...  \n",
              "65                               Add files via upload  \n",
              "\n",
              "[66 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6214bda3-62ba-43e1-ae6c-b2fe4eeb81ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e97c56f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:28:20 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>675c662</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:16:38 2025 -0400</td>\n",
              "      <td>Stage 0 - Get GitHub commit history</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>411c9c6</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:14:55 2025 -0400</td>\n",
              "      <td>Delete GitHub_git_log.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>e53df05</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:13:44 2025 -0400</td>\n",
              "      <td>Unified Py file containing stages 0-2 &amp; main_r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15cc3e3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Tue May 20 18:12:54 2025 -0400</td>\n",
              "      <td>Delete Assignment_2_Unified_Pyfile_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>20cebef</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:17:57 2025 -0400</td>\n",
              "      <td>Stage 1.4 - Calculate Descriptive Statistics W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>12e6e91</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sat Mar 22 13:23:19 2025 -0400</td>\n",
              "      <td>Stage 1.3 - Replace missing values.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>fd5043e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 13:38:44 2025 -0400</td>\n",
              "      <td>Stage 1.2.1. - Remove negative &amp; outlier rows ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>3fef242</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 12:55:28 2025 -0400</td>\n",
              "      <td>Stage 1.1 - Import CSV data and load in Pandas...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>741ccd3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 16 18:51:36 2025 -0400</td>\n",
              "      <td>Add files via upload</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>66 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6214bda3-62ba-43e1-ae6c-b2fe4eeb81ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6214bda3-62ba-43e1-ae6c-b2fe4eeb81ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6214bda3-62ba-43e1-ae6c-b2fe4eeb81ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-41396dd0-335a-4e9d-92c6-01fc7741eb15\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41396dd0-335a-4e9d-92c6-01fc7741eb15')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-41396dd0-335a-4e9d-92c6-01fc7741eb15 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"  print(f\\\"Git Log: {results['git_log']}\\\")\",\n  \"rows\": 66,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"0ba7260\",\n          \"12e6e91\",\n          \"e97c56f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          \"Fri Apr 4 08:47:29 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 53,\n        \"samples\": [\n          \"Delete CS5901_assignment2_get_utils_py_py.ipynb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded successfully. Dimensions:(482, 5)\n",
            "The two dataframes are equal (T or F): False\n",
            "Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: []\n",
            "Number of duplicate rows: 0\n",
            "Number of rows after dropping duplicates: 384\n",
            "Data loaded and cleaned successfully.\n",
            "Duplicates: (Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: [],      Level         T4         T3  T3adjusted  T4adjusted\n",
            "0        5   8.100000   2.100000    2.008299    1.280579\n",
            "1        5   8.700000   4.419980    2.056710    1.467960\n",
            "2       20   7.900000   4.600000    1.991632    1.663103\n",
            "3       30   2.300000   0.400000    1.320006    0.736806\n",
            "4       20   5.400000   2.600000    1.754411    1.375069\n",
            "..     ...        ...        ...         ...         ...\n",
            "464     50   1.103030   1.612121    1.033227    1.172553\n",
            "465     50   7.051852  15.348148    1.917643    2.485146\n",
            "467     50  10.905263   3.389474    2.217577    1.502141\n",
            "470    100  27.800000  42.300000    3.029342    3.484283\n",
            "478    150 -13.600000  -4.500000   -2.386966   -1.650964\n",
            "\n",
            "[384 rows x 5 columns])\n",
            "Manual Stats:             Level          T4          T3  T3adjusted  T4adjusted\n",
            "count  384.000000  384.000000  384.000000  384.000000  384.000000\n",
            "mean    28.268229   12.970317   11.609370    2.192149    2.038168\n",
            "std     51.336533    9.345622    9.910619    0.639976    0.679945\n",
            "min      5.000000  -13.600000   -4.500000   -2.386966   -1.650964\n",
            "25%     10.000000    5.905058    4.419980    1.807483    1.557038\n",
            "50%     20.000000   11.071429    8.000000    2.223730    1.995816\n",
            "75%     20.000000   18.425000   15.511765    2.641206    2.461178\n",
            "max    400.000000   41.400000   42.300000    3.459395    3.484283\n",
            "Pandas Stats:             Level          T4          T3  T3adjusted  T4adjusted\n",
            "count  384.000000  384.000000  384.000000  384.000000  384.000000\n",
            "mean    28.268229   12.970317   11.609370    2.192149    2.038168\n",
            "std     51.336533    9.345622    9.910619    0.639976    0.679945\n",
            "min      5.000000  -13.600000   -4.500000   -2.386966   -1.650964\n",
            "25%     10.000000    5.905058    4.419980    1.807483    1.557038\n",
            "50%     20.000000   11.071429    8.000000    2.223730    1.995816\n",
            "75%     20.000000   18.425000   15.511765    2.641206    2.461178\n",
            "max    400.000000   41.400000   42.300000    3.459395    3.484283\n",
            "Complexity Results: ({'matrix_mult': {'time': [0.0011646747589111328, 0.17978596687316895, 2.3406803607940674], 'space': [0, 0, 7897088]}, 'integer_sort': {'time': [0.0002715587615966797, 0.0039408206939697266, 0.028420209884643555], 'space': [0, 0, 0]}, 'string_search': {'time': [1.8596649169921875e-05, 0.0024993419647216797]}}, [100, 500, 1000])\n",
            "Git Log:    Commit Hash  Author                            Date  \\\n",
            "0      e97c56f  jsp289  Tue May 20 18:28:20 2025 -0400   \n",
            "1      675c662  jsp289  Tue May 20 18:16:38 2025 -0400   \n",
            "2      411c9c6  jsp289  Tue May 20 18:14:55 2025 -0400   \n",
            "3      e53df05  jsp289  Tue May 20 18:13:44 2025 -0400   \n",
            "4      15cc3e3  jsp289  Tue May 20 18:12:54 2025 -0400   \n",
            "..         ...     ...                             ...   \n",
            "61     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
            "62     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
            "63     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
            "64     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
            "65     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
            "\n",
            "                                              Subject  \n",
            "0            Delete Assignment_2_Unified_Pyfile_py.py  \n",
            "1                 Stage 0 - Get GitHub commit history  \n",
            "2                         Delete GitHub_git_log.ipynb  \n",
            "3   Unified Py file containing stages 0-2 & main_r...  \n",
            "4         Delete Assignment_2_Unified_Pyfile_py.ipynb  \n",
            "..                                                ...  \n",
            "61  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
            "62                Stage 1.3 - Replace missing values.  \n",
            "63  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
            "64  Stage 1.1 - Import CSV data and load in Pandas...  \n",
            "65                               Add files via upload  \n",
            "\n",
            "[66 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LIkCjWvchW5c"
      },
      "execution_count": 20,
      "outputs": []
    }
  ]
}