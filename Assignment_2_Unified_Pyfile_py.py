{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN2w/cOtr0E37p7cmcqjYaa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jsp289/CS5901_Assignment2/blob/main/Assignment_2_Unified_Pyfile_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "VZvB8rITk7zU",
        "outputId": "eebd9322-639e-40aa-9f79-70b7296d2e22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded successfully. Dimensions:(482, 5)\n",
            "The two dataframes are equal (T or F): False\n",
            "Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: []\n",
            "Number of duplicate rows: 0\n",
            "Number of rows after dropping duplicates: 384\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Level   T4       T3  T3adjusted  T4adjusted\n",
              "0      5  8.1  2.10000    2.008299    1.280579\n",
              "1      5  8.7  4.41998    2.056710    1.467960\n",
              "2     20  7.9  4.60000    1.991632    1.663103\n",
              "3     30  2.3  0.40000    1.320006    0.736806\n",
              "4     20  5.4  2.60000    1.754411    1.375069"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c27d8e87-f7c6-4772-bc1b-55f422cf4d0e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Level</th>\n",
              "      <th>T4</th>\n",
              "      <th>T3</th>\n",
              "      <th>T3adjusted</th>\n",
              "      <th>T4adjusted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>8.1</td>\n",
              "      <td>2.10000</td>\n",
              "      <td>2.008299</td>\n",
              "      <td>1.280579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>8.7</td>\n",
              "      <td>4.41998</td>\n",
              "      <td>2.056710</td>\n",
              "      <td>1.467960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>7.9</td>\n",
              "      <td>4.60000</td>\n",
              "      <td>1.991632</td>\n",
              "      <td>1.663103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.40000</td>\n",
              "      <td>1.320006</td>\n",
              "      <td>0.736806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.60000</td>\n",
              "      <td>1.754411</td>\n",
              "      <td>1.375069</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c27d8e87-f7c6-4772-bc1b-55f422cf4d0e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c27d8e87-f7c6-4772-bc1b-55f422cf4d0e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c27d8e87-f7c6-4772-bc1b-55f422cf4d0e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ac019be8-81ef-49fc-a341-4360bb1fb868\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac019be8-81ef-49fc-a341-4360bb1fb868')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ac019be8-81ef-49fc-a341-4360bb1fb868 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filled_no_duplicates",
              "summary": "{\n  \"name\": \"df_filled_no_duplicates\",\n  \"rows\": 384,\n  \"fields\": [\n    {\n      \"column\": \"Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 5,\n        \"max\": 400,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          25,\n          400,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.3456221944427,\n        \"min\": -13.6,\n        \"max\": 41.4,\n        \"num_unique_values\": 316,\n        \"samples\": [\n          0.444444444,\n          2.2,\n          6.608\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.910619237535029,\n        \"min\": -4.5,\n        \"max\": 42.3,\n        \"num_unique_values\": 271,\n        \"samples\": [\n          2.0,\n          33.2,\n          29.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3adjusted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6399761426222788,\n        \"min\": -2.386966384,\n        \"max\": 3.459394684,\n        \"num_unique_values\": 316,\n        \"samples\": [\n          0.763142828,\n          1.300591447,\n          1.876535039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4adjusted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6799453335402628,\n        \"min\": -1.650963624,\n        \"max\": 3.484283271,\n        \"num_unique_values\": 271,\n        \"samples\": [\n          1.25992105,\n          3.214001151,\n          3.096840346\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"CS5901_assignment2_stage1_data_cleaning.py\n",
        "\n",
        "Automatically generated by Colab.\n",
        "\n",
        "Original file is located at\n",
        "    https://colab.research.google.com/drive/1TF96oHdXZ2cYvQKSGVgmXYl1-8ohKgmK\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 1**\n",
        "*This .py file provides functions for data cleaning the CSV file*\n",
        "\n",
        "### **Stage 1.1** - Import Data\n",
        "*Import the CSV file from Git Repo and load into a Pandas data frame.*\n",
        "\"\"\"\n",
        "\n",
        "# Initialize Google Drive when saved to G-Drive\n",
        "#from google.colab import drive\n",
        "#drive.mount('/content/drive')\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "def import_data(file_path):\n",
        "  \"\"\"\n",
        "  This function imports data from a CSV file and load it into a Pandas DataFrame\n",
        "\n",
        "  Args:\n",
        "    file_path: location path of the CSV file\n",
        "  Returns:\n",
        "    df: a Pandas dataframe of the data in the CSV file\n",
        "    else: print error message\n",
        "  \"\"\"\n",
        "\n",
        "  #load CSV file in a Pandas dataframe using tab delimiter\n",
        "  try:\n",
        "    df_loaded = pd.read_csv(file_path, delimiter='\\t')\n",
        "    print(f\"Data loaded successfully. Dimensions:{df_loaded.shape}\")\n",
        "    return df_loaded\n",
        "  except Exception as e:\n",
        "    print(f\"Error loading data: {e}\")\n",
        "    return None\n",
        "\n",
        "# File path of CSV file in Google-Drive\n",
        "#file_path = '/content/drive/My Drive/P2data6332.csv'\n",
        "\n",
        "#GitHub filepath\n",
        "file_path = 'https://raw.githubusercontent.com/jsp289/CS5901_Assignment2/refs/heads/main/P2data6332.csv'\n",
        "\n",
        "df =  import_data(file_path)\n",
        "df.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stages 1.2 - Remove Nonsensical Rows\n",
        "*Here we drop negative values and outliers.*\n",
        "\"\"\"\n",
        "\n",
        "def remove_nonsensical_rows(df):\n",
        "  \"\"\"\n",
        "  This function removes negative values and outliers using the interquartile range method\n",
        "  from the data frame generated in Stage 1.1\n",
        "\n",
        "  Args:\n",
        "    df: the Pandas dataframe generated in Stage 1.1\n",
        "  Returns:\n",
        "    df_cleaned: a Pandas dataframe with negative values and outliers removed\n",
        "    nonsensical_data: a Pandas dataframe with negative values and outliers\n",
        "  \"\"\"\n",
        "\n",
        "  # Identify negative values in columns\n",
        "  negative_rows = df[(df[['T3','T4','T3adjusted','T4adjusted']]<0).any(axis=1)]\n",
        "\n",
        "  #return negative_rows\n",
        "\n",
        "#nonsensical_data = remove_nonsensical_rows(df)\n",
        "#nonsensical_data.shape\n",
        "#nonsensical_data.head()\n",
        "\n",
        "  # Identify outliers with the IQR method\n",
        "  Q1 = df[['T3','T4','T3adjusted','T4adjusted']].quantile(0.25)\n",
        "  Q3 = df[['T3','T4','T3adjusted','T4adjusted']].quantile(0.75)\n",
        "  IQR = Q3 - Q1\n",
        "\n",
        "  #Calculate outlier boundaries\n",
        "  lower_bound = Q1 - 1.5 * IQR\n",
        "  upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "  #Isolate outlier rows\n",
        "  outlier_rows = df.loc[((df[['T3','T4','T3adjusted','T4adjusted']] < lower_bound)|\n",
        "                     (df[['T3','T4','T3adjusted','T4adjusted']] > upper_bound)).any(axis=1)]\n",
        "\n",
        "  #return outlier_rows\n",
        "\n",
        "#nonsensical_data = remove_nonsensical_rows(df)\n",
        "#nonsensical_data.shape\n",
        "#nonsensical_data.head()\n",
        "\n",
        "  #Combine negative and outlier rows\n",
        "  invalid_rows = pd.concat([negative_rows, outlier_rows]).drop_duplicates()\n",
        "\n",
        "  #Drop invalid rows and duplicates\n",
        "  df_cleaned = df.drop(invalid_rows.index).drop_duplicates()\n",
        "\n",
        "  return df_cleaned, invalid_rows\n",
        "\n",
        "df_cleaned, invalid_rows = remove_nonsensical_rows(df)\n",
        "df_cleaned.shape\n",
        "#invalid_rows.shape\n",
        "df_cleaned.head()\n",
        "#invalid_rows.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.3 - Replace Missing Values\n",
        "*Here we replace missing values in T3 and T4 by their average.*\n",
        "\"\"\"\n",
        "\n",
        "def replace_missing_values(df):\n",
        "  \"\"\"\n",
        "  This function replaces missing values in T3,T4, T3adjusted, T4adjusted by their average\n",
        "  from the cleaned dataframe generated in Stage 1.2\n",
        "\n",
        "  Args:\n",
        "    df: the cleaned Pandas dataframe generated in Stage 1.2\n",
        "  Returns:\n",
        "    df_filled: a cleaned Pandas dataframe where the missing values in T3 and T4 are replaced\n",
        "    by their average.\n",
        "  \"\"\"\n",
        "\n",
        "  #Calculate the averages of columns T3,T4, T3adjusted, T4adjusted\n",
        "  col_means = df.groupby(\"Level\")[[\"T3\",\"T4\",\"T3adjusted\",\"T4adjusted\"]].mean()\n",
        "\n",
        "  #Replace missing values in Stage 1.2 with corresponding values from col_means\n",
        "  df_filled = df.copy()\n",
        "  df_filled[\"T3\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T3\"] if pd.isna(row[\"T3\"]) else row[\"T3\"], axis=1)\n",
        "  df_filled[\"T4\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T4\"] if pd.isna(row[\"T4\"]) else row[\"T4\"], axis=1)\n",
        "  df_filled[\"T3adjusted\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T3adjusted\"] if pd.isna(row[\"T3adjusted\"]) else row[\"T3adjusted\"], axis=1)\n",
        "  df_filled[\"T4adjusted\"] = df_filled.apply(lambda row: col_means.loc[row[\"Level\"],\"T4adjusted\"] if pd.isna(row[\"T4adjusted\"]) else row[\"T4adjusted\"], axis=1)\n",
        "\n",
        "  return df_filled\n",
        "\n",
        "df_filled = replace_missing_values(df_cleaned)\n",
        "df_filled.head()\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.4 - Calculate Descriptive Statistics Without Pandas\n",
        "*Here we compute descriptive statistics manually and compare results against and compare against the pd.describe() method.*\n",
        "\"\"\"\n",
        "\n",
        "def calculate_stats(df):\n",
        "  \"\"\"\n",
        "  This function computes descriptive statistics manually and compare results against and compare against the pd.describe() method\n",
        "  from the filled dataframe generated in Stage 1.3\n",
        "\n",
        "  Args:\n",
        "    df: the filled Pandas dataframe generated in Stage 1.3\n",
        "  Returns:\n",
        "    manual_stats: a Pandas dataframe with descriptive statistics computed manually\n",
        "    pd_stats: a Pandas dataframe with descriptive statistics computed using pd.describe()\n",
        "  \"\"\"\n",
        "  #Create the dataframe for manual_stats\n",
        "  manual_stats = pd.DataFrame()\n",
        "\n",
        "  #Compute stats manually and populate manual_stats dataframe\n",
        "  manual_stats[\"count\"] = df.count()\n",
        "  manual_stats[\"mean\"] = df.mean()\n",
        "  manual_stats[\"std\"] = df.std()\n",
        "  manual_stats[\"min\"] = df.min()\n",
        "  manual_stats[\"25%\"] = df.quantile(0.25)\n",
        "  manual_stats[\"50%\"] = df.quantile(0.5)\n",
        "  manual_stats[\"75%\"] = df.quantile(0.75)\n",
        "  manual_stats[\"max\"] = df.max()\n",
        "\n",
        "  #Transpose manual_stats to match Pandas formatting\n",
        "  manual_stats = manual_stats.transpose()\n",
        "  pd_stats = df.describe()\n",
        "\n",
        "  print(\"The two dataframes are equal (T or F):\", manual_stats.equals(pd_stats))\n",
        "  return manual_stats, pd_stats\n",
        "\n",
        "\n",
        "manual_stats = calculate_stats(df_filled)\n",
        "manual_stats\n",
        "\n",
        "\"\"\"---\n",
        "### Stage 1.5 - Identify Duplicate Rows\n",
        "*Here we identify and confirm the existence of duplicate rows in df_filled*\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "def duplicate_rows(df):\n",
        "  \"\"\"\n",
        "  This function identifies and confirms the existence of duplicate rows in df_filled and drops them.\n",
        "\n",
        "  Args:\n",
        "    df: the df_filled Pandas dataframe generated in Stage 1.3\n",
        "  Returns:\n",
        "    duplicate_data: a Pandas dataframe with duplicate rows\n",
        "    df_filled_no_duplicates: a Pandas dataframe with duplicate rows removed\n",
        "  \"\"\"\n",
        "\n",
        "  #Create dataframe for duplicate rows\n",
        "  duplicate_data = df_filled[df_filled.duplicated()]\n",
        "  print(duplicate_data)\n",
        "  print(f\"Number of duplicate rows: {duplicate_data.shape[0]}\")\n",
        "\n",
        "  #Create dataframe without duplicate rows\n",
        "  df_filled_no_duplicates = df_filled.drop_duplicates()\n",
        "  print(f\"Number of rows after dropping duplicates: {df_filled_no_duplicates.shape[0]}\")\n",
        "\n",
        "  return duplicate_data, df_filled_no_duplicates\n",
        "\n",
        "\n",
        "duplicate_data, df_filled_no_duplicates = duplicate_rows(df_filled)\n",
        "df_filled_no_duplicates.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"CS5901_assignment2_stage2_time_space_complexity.py\n",
        "\n",
        "Automatically generated by Colab.\n",
        "\n",
        "Original file is located at\n",
        "    https://colab.research.google.com/drive/1nAZbB-sRUbgYE-Rv23BvcbSZhH8vSpVk\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 2**\n",
        "*This .py file provides functions to calculate the time and space complexity for:*\n",
        "\n",
        "1.   Standard Matrix Multiplication\n",
        "2.   Unordered List of Integers\n",
        "3.   Substring Find() Method vs. Loop italicized text\n",
        "\n",
        "---\n",
        "\n",
        "### **Stage 2.1** - Standard Matrix Multiplication Space-Time Complexity\n",
        "*Here we multiply a random integer matrix by a random float matrix of increasing size and compare their time and space complexities using a scatter plot.*\n",
        "\"\"\"\n",
        "\n",
        "#Import all libraries required for space-time complexity analysis\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "import gc\n",
        "import psutil\n",
        "import os\n",
        "import sys\n",
        "import string\n",
        "import random\n",
        "\n",
        "def matrix_multiplication(size):\n",
        "  \"\"\"\n",
        "  This function identifies multiplies 2 square matrices and computes space and time required to compute.\n",
        "\n",
        "  Args:\n",
        "    size (int): size of the square matrix\n",
        "  Returns:\n",
        "    run_time (float): time required to compute\n",
        "    mem_usage (float): space required to compute\n",
        "  \"\"\"\n",
        "  #Initiate random integer matrices\n",
        "  A = np.random.randint(1, 50000, size=(size, size))\n",
        "  B = np.random.randint(1, 50000, size=(size, size))\n",
        "\n",
        "  # Initiate space & time baselines\n",
        "  start_time = time.time()\n",
        "  process = psutil.Process(os.getpid())\n",
        "  base_mem = process.memory_info().rss\n",
        "\n",
        "  # Matrix multiplication\n",
        "  final_mat = np.dot(A, B)\n",
        "\n",
        "  #Compute running time and memory usage\n",
        "  end_time = time.time()\n",
        "  mem_usage = process.memory_info().rss - base_mem\n",
        "  run_time = end_time - start_time\n",
        "\n",
        "  return run_time, mem_usage\n",
        "print(matrix_multiplication(400))\n",
        "\n",
        "\"\"\"### **Stage 2.2** - Ordering Integers\n",
        "*Here we have a matrix of unordered integers, we flatten it, sort the elements from smallest to largest, and compute the space and time complexity of the sorting process*\n",
        "\"\"\"\n",
        "\n",
        "def inneficient_integer_sort(size):\n",
        "  \"\"\"\n",
        "  This function generates a random matrix of integers, stores it in a list, and sorts them in ascending order.\n",
        "\n",
        "  Args:\n",
        "    size (int): size of the square matrix\n",
        "  Returns:\n",
        "    run_time (float): time required to compute\n",
        "    mem_usage (float): space required to compute\n",
        "  \"\"\"\n",
        "  #Generate random matrix and store in list\n",
        "  lst_rand_ints = np.random.randint(1,50000,size).tolist()\n",
        "  start = time.time()\n",
        "  process = psutil.Process(os.getpid())\n",
        "  base_mem = process.memory_info().rss\n",
        "\n",
        "  #Inneficient sort\n",
        "  sorted_lst_rand_ints = []\n",
        "  while lst_rand_ints:\n",
        "    min = lst_rand_ints[0]\n",
        "    for rand_int in lst_rand_ints:\n",
        "      if rand_int < min:\n",
        "        min = rand_int\n",
        "    sorted_lst_rand_ints.append(min)\n",
        "    lst_rand_ints.remove(min)\n",
        "\n",
        "  #Compute space and time complexity of inneficient sort\n",
        "  end = time.time()\n",
        "  mem_usage = process.memory_info().rss - base_mem\n",
        "  run_time = end - start\n",
        "\n",
        "  return run_time, mem_usage\n",
        "print(inneficient_integer_sort(5000))\n",
        "\n",
        "\"\"\"### **Stage 2.3** - String Find Method vs Manual Method\n",
        "*Here we generate a random string and compare the space-time complexity of manual sort vs the string.find() method*\n",
        "\"\"\"\n",
        "\n",
        "def string_search_comparison(text,char):\n",
        "  \"\"\"\n",
        "  This function compares time of manual string search vs the string.find() method\n",
        "\n",
        "  Args:\n",
        "    text (str): a random string\n",
        "    char (str): a random character or substring\n",
        "  Returns:\n",
        "    str_find_time (float): time required to compute string.find() method\n",
        "    manual_find_time (float): time required to compute manual search\n",
        "\n",
        "  \"\"\"\n",
        "  # Str.find() time\n",
        "  start_find = time.time()\n",
        "  find_result = text.find(char)\n",
        "  end_find = time.time()\n",
        "  str_find_time = end_find - start_find\n",
        "\n",
        "  # Manual search time (the loop breaks when it finds the substring)\n",
        "  start_manual = time.time()\n",
        "  manual_count = -1\n",
        "  for i in range(len(text)-len(char)+1):\n",
        "    if text[i:i + len(char)] == char:\n",
        "      manual_count =1\n",
        "      break\n",
        "  end_manual = time.time()\n",
        "  manual_find_time = end_manual - start_manual\n",
        "\n",
        "  return str_find_time, manual_find_time\n",
        "\n",
        "\n",
        "text = \"a\" * 10000 + \"b\" + \"ab\" * 10000\n",
        "char = \"ab\"\n",
        "find_t, manual_t = string_search_comparison(text, char)\n",
        "print(f\"String.find() method time: {find_t}\")\n",
        "print(f\"Manual search time: {manual_t}\")\n",
        "\n",
        "\"\"\"### **Stage 2.4** - Summary Analysis\n",
        "*Here we analyze the space-time complexity for all algorithms implemented for stages 2.1 to 2.3*\n",
        "\"\"\"\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def complexity_analysis(sizes=[100,500,1000]):\n",
        "  \"\"\"\n",
        "  This function compares time of manual string search vs the string.find() method\n",
        "\n",
        "  Args:\n",
        "    sizes (lst): a list of input sizes for testing\n",
        "\n",
        "  Returns:\n",
        "    tuple (results_dict, sizes_tested)\n",
        "\n",
        "  \"\"\"\n",
        "  #Initiate dictionary to store test results\n",
        "\n",
        "  results = {'matrix_mult':{'time':[],'space':[]},\n",
        "             'integer_sort':{'time':[],'space':[]}}\n",
        "\n",
        "  for size in sizes:\n",
        "    #clear memory before each test\n",
        "    gc.collect()\n",
        "\n",
        "    #test for matrix multiplixation\n",
        "    t,s = matrix_multiplication(size)\n",
        "    results['matrix_mult']['time'].append(t)\n",
        "    results['matrix_mult']['space'].append(s)\n",
        "\n",
        "    #test for inneficient integer sort\n",
        "    t,s = inneficient_integer_sort(size)\n",
        "    results['integer_sort']['time'].append(t)\n",
        "    results['integer_sort']['space'].append(s)\n",
        "\n",
        "  #test for string search\n",
        "  text = \"a\" * 10000 + \"b\" + \"ab\" * 10000\n",
        "  char = \"ab\"\n",
        "  str_find_time, manual_find_time = string_search_comparison(text, char)\n",
        "  results['string_search'] = {'time':[str_find_time, manual_find_time]}\n",
        "\n",
        "  return results, sizes\n",
        "\n",
        "# Call and print results\n",
        "results, sizes = complexity_analysis(sizes=[100, 500, 1000])\n",
        "print(\"\\nComplexity Analysis Results:\")\n",
        "for algorithm, data in results.items():\n",
        "    print(f\"\\n{algorithm}:\")\n",
        "    for metric, values in data.items():\n",
        "        print(f\"  {metric}: {values}\")\n",
        "print(\"\\nSizes Tested:\", sizes)\n",
        "\n",
        "# Create scatter plots\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))  # 1 row, 2 columns\n",
        "\n",
        "# Time Complexity Plot\n",
        "ax1.scatter(sizes, results['matrix_mult']['time'], label='Matrix Multiplication')\n",
        "ax1.scatter(sizes, results['integer_sort']['time'], label='Integer Sort')\n",
        "ax1.set_xlabel('Input Size')\n",
        "ax1.set_ylabel('Time (seconds)')\n",
        "ax1.set_title('Time Complexity')\n",
        "ax1.legend()\n",
        "\n",
        "# Space Complexity Plot\n",
        "ax2.scatter(sizes, results['matrix_mult']['space'], label='Matrix Multiplication')\n",
        "ax2.scatter(sizes, results['integer_sort']['space'], label='Integer Sort')\n",
        "ax2.set_xlabel('Input Size')\n",
        "ax2.set_ylabel('Space (bytes)')\n",
        "ax2.set_title('Space Complexity')\n",
        "ax2.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 937
        },
        "id": "Q3cfGNJ7l1uU",
        "outputId": "dfa0d7c6-e6fc-4cee-e1ac-65af3d4cb811"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(0.47422027587890625, 1351680)\n",
            "(1.7166574001312256, 0)\n",
            "String.find() method time: 2.2172927856445312e-05\n",
            "Manual search time: 0.005689859390258789\n",
            "\n",
            "Complexity Analysis Results:\n",
            "\n",
            "matrix_mult:\n",
            "  time: [0.005789518356323242, 0.564594030380249, 5.770657539367676]\n",
            "  space: [266240, 2162688, 8171520]\n",
            "\n",
            "integer_sort:\n",
            "  time: [0.00813150405883789, 0.013441801071166992, 0.0234677791595459]\n",
            "  space: [0, 0, 0]\n",
            "\n",
            "string_search:\n",
            "  time: [2.1457672119140625e-05, 0.002460002899169922]\n",
            "\n",
            "Sizes Tested: [100, 500, 1000]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAe4pJREFUeJzs3Xd8FNX+//H3JiEFQpaWEEoIvYQQutwAAipIt6MiJRT1qnQuClwLREXAiooiogZQEEVAlHtpIk2kN0EQASNwJRCkJIQSIDm/P/hlv64JEEIykw2v5+OxD50zZ2Y+s0M2n3z2zBmHMcYIAAAAAAAAsJCX3QEAAAAAAADg5kNRCgAAAAAAAJajKAUAAAAAAADLUZQCAAAAAACA5ShKAQAAAAAAwHIUpQAAAAAAAGA5ilIAAAAAAACwHEUpAAAAAAAAWI6iFAAAAAAAACxHUQqAJKlXr16qWLGi3WEUKBUrVlSvXr3ybP9Tp06Vw+HQ77//nmfHAAAAsNuKFSvkcDi0YsWKPDtGq1at1KpVqzzbP4CsUZQCCjCHw5GtV17+gr9RR48e1bBhw1SzZk0VLlxYRYoUUcOGDfXyyy/r1KlTdoeX77z//vuaOnWq3WEAAOBxduzYoQceeEDh4eHy9/dXuXLl1KZNG7377rt2h5ZrVqxYofvuu0+hoaHy9fVVSEiIOnfurLlz59odWr5z+PBhjR49Wtu2bbM7FKBAcxhjjN1BAMgbn332mdvy9OnTtXTpUn366adu7W3atFGJEiWUnp4uPz8/K0O8qo0bN6pDhw5KSUlR9+7d1bBhQ0nSpk2bNGvWLDVt2lRLliyxOcorq1ixolq1apVnRaK0tDRdvHhRfn5+cjgckqTIyEiVKlUqXxcaAQDIb3788UfddtttqlChgmJiYhQaGqpDhw5p3bp12r9/v/bt22d3iDds1KhRevHFF1WtWjV17dpV4eHhOn78uP773/9qxYoVmjFjhh555BG7w8zSihUrdNttt2n58uV5NprpwoULkiRfX19Jl/PNxo0bKy4uLk9HvgM3Ox+7AwCQd7p37+62vG7dOi1dujRTe3506tQp3XvvvfL29tbWrVtVs2ZNt/VjxozRlClTbIouf/D29pa3t7fdYQAA4PHGjBkjp9OpjRs3qlixYm7rEhMT7QkqF3311Vd68cUX9cADD2jmzJkqVKiQa93TTz+txYsX6+LFizZGaL+MYhQAa3H7HgBJmeeU+v333+VwOPT666/rvffeU+XKlVW4cGHdeeedOnTokIwxeumll1S+fHkFBATo7rvv1okTJzLtd+HChbr11ltVpEgRFS1aVB07dtTPP/98zXgmT56sP/74Q2+++WamgpQklS5dWs8995xb2/vvv6/atWvLz89PZcuWVb9+/TLd4teqVStFRkbqp59+UsuWLVW4cGFVrVpVX331lSRp5cqVatKkiQICAlSjRg199913btuPHj1aDodDv/zyix588EEFBQWpZMmSGjRokM6fP3/N8zp16pQGDx6ssLAw+fn5qWrVqho/frzS09MlScYY3XbbbQoODnZLgi9cuKA6deqoSpUqOnPmjKTMc0pVrFhRP//8s1auXOm6NbNVq1b67bff5HA49NZbb2WK58cff5TD4dDnn39+zdgBACio9u/fr9q1a2cqSElSSEiI27LD4VD//v01Y8YM1ahRQ/7+/mrYsKFWrVrl1u/AgQN66qmnVKNGDQUEBKhkyZLq0qVLlnNBnjp1SkOGDFHFihXl5+en8uXLq2fPnvrzzz9dfVJTUzVq1ChVrVpVfn5+CgsL0zPPPKPU1NRrnt/zzz+vEiVK6JNPPnErSGVo27atOnXq5FpOTExU3759Vbp0afn7+6tu3bqaNm2a2za5kStWrFhRnTp10pIlS1SvXj35+/srIiIi27cTrl+/Xu3atZPT6VThwoXVsmVLrVmzxrV+9+7dCggIUM+ePd22++GHH+Tt7a3hw4e72v46p9SKFSvUuHFjSVLv3r1dedXUqVM1atQoFSpUSMeOHcsUz+OPP65ixYplKycE8P8ZADeNfv36mSv92MfExJjw8HDXcnx8vJFk6tWrZyIiIsybb75pnnvuOePr62v+8Y9/mH//+9+madOm5p133jEDBw40DofD9O7d222f06dPNw6Hw7Rr1868++67Zvz48aZixYqmWLFiJj4+/qqxNm3a1AQEBJjU1NRsnduoUaOMJNO6dWvz7rvvmv79+xtvb2/TuHFjc+HCBVe/li1bmrJly5qwsDDz9NNPm3fffddEREQYb29vM2vWLBMaGmpGjx5tJkyYYMqVK2ecTqdJTk7OdJw6deqYzp07m4kTJ5ru3bsbSaZHjx5uMYWHh5uYmBjX8pkzZ0xUVJQpWbKk+fe//20++OAD07NnT+NwOMygQYNc/X777TcTGBho7r33XlfbiBEjjMPhMCtXrnS1xcXFGUmu93LevHmmfPnypmbNmubTTz81n376qVmyZIkxxphmzZqZhg0bZnrfnnrqKVO0aFFz5syZbL3PAAAURHfeeacpWrSo2bFjxzX7SjKRkZGmVKlS5sUXXzTjx4834eHhJiAgwG372bNnm7p165oXXnjBfPjhh+bf//63KV68uAkPD3f7vXv69GkTGRlpvL29zWOPPWYmTZpkXnrpJdO4cWOzdetWY4wxaWlp5s477zSFCxc2gwcPNpMnTzb9+/c3Pj4+5u67775qvL/++quRZPr06ZOt9+Ls2bOmVq1aplChQmbIkCHmnXfeMbfeequRZCZMmODqlxu5Ynh4uKlevbopVqyYGTFihHnzzTdNnTp1jJeXlyuHMcaY5cuXG0lm+fLlrrZly5YZX19fEx0dbd544w3z1ltvmaioKOPr62vWr1/v6vfaa68ZSWb+/PnGGGNSUlJMlSpVTEREhDl//ryrX8uWLU3Lli2NMcYcOXLEvPjii0aSefzxx1151f79+83evXuNJPPuu++6nUtqaqopXrx4tt9nAJdRlAJuIjkpSgUHB5tTp0652keOHGkkmbp165qLFy+62rt27Wp8fX1dv9xPnz5tihUrZh577DG34xw5csQ4nc5M7X9XvHhxU7du3WydV2JiovH19TV33nmnSUtLc7VPnDjRSDKffPKJq61ly5ZGkpk5c6ar7ZdffjGSjJeXl1m3bp2rffHixUaSiYuLc7VlFKXuuusutxieeuopI8ls377d1fb3otRLL71kihQpYn799Ve3bUeMGGG8vb3NwYMHXW2TJ082ksxnn31m1q1bZ7y9vc3gwYPdtvt7UcoYY2rXru1KqP4qY3+7d+92tV24cMGUKlXKLUYAAG5GS5YsMd7e3sbb29tER0ebZ555xixevNjti60Mkowks2nTJlfbgQMHjL+/v9sXSmfPns207dq1a40kM336dFfbCy+8YCSZuXPnZuqfnp5ujDHm008/NV5eXmb16tVu6z/44AMjyaxZs+aK5zZ//nwjybz11ltXfgP+YsKECa4cJMOFCxdMdHS0CQwMdH1Zd6O5ojGXcyVJZs6cOa62pKQkU6ZMGVO/fn1X29+LUunp6aZatWqmbdu2rvfImMvveaVKlUybNm1cbWlpaaZ58+amdOnS5s8//zT9+vUzPj4+ZuPGjW7n/deilDHGbNy4MVMemCE6Oto0adLErW3u3LmZCmcAro3b9wBcVZcuXeR0Ol3LTZo0kXR5viofHx+39gsXLuiPP/6QJC1dulSnTp1S165d9eeff7pe3t7eatKkiZYvX37V4yYnJ6to0aLZivG7777ThQsXNHjwYHl5/d/H2mOPPaagoCD95z//cesfGBiohx9+2LVco0YNFStWTLVq1XKd31/P9bfffst0zH79+rktDxgwQJL03//+94pxzp49W7feequKFy/u9p60bt1aaWlpbsP+H3/8cbVt21YDBgxQjx49VKVKFb3yyivZeTuy9OCDD8rf318zZsxwtS1evFh//vmnR8wxBgBAXmrTpo3Wrl2ru+66S9u3b9err76qtm3bqly5cvrmm28y9Y+OjnY9gEWSKlSooLvvvluLFy9WWlqaJCkgIMC1/uLFizp+/LiqVq2qYsWKacuWLa51c+bMUd26dXXvvfdmOk7Gg0xmz56tWrVqqWbNmm45xO233y5JV82rkpOTJSnbedV///tfhYaGqmvXrq62QoUKaeDAgUpJSdHKlSvd+uc0V8xQtmxZt3MPCgpSz549tXXrVh05ciTLGLdt26a9e/fqkUce0fHjx13vx5kzZ3THHXdo1apVrqkRvLy8NHXqVKWkpKh9+/Z6//33NXLkSDVq1Chb70dWevbsqfXr12v//v2uthkzZigsLEwtW7bM8X6BmxFFKQBXVaFCBbfljKQjLCwsy/aTJ09Kkvbu3StJuv322xUcHOz2WrJkyTUnDQ0KCtLp06ezFeOBAwckXS4u/ZWvr68qV67sWp+hfPnyriTvr/Ff65z+qlq1am7LVapUkZeXV5bzRGTYu3evFi1alOn9aN26taTME6l+/PHHOnv2rPbu3aupU6e6JbfXq1ixYurcubNmzpzpapsxY4bKlSvnSmgB3HxWrVqlzp07q2zZsnI4HPr666+vex/GGL3++uuqXr26/Pz8VK5cOY0ZMyb3gwXyWOPGjTV37lydPHlSGzZs0MiRI3X69Gk98MAD2rVrl1vfv+cBklS9enWdPXvWNdfQuXPn9MILL7jmkSxVqpSCg4N16tQpJSUlubbbv3+/IiMjrxrb3r179fPPP2fKIapXry7p6pOxBwUFSdJ15VXVqlVz+6JPkmrVquVa/1c5zRUzVK1aNVNelnFeV8qrMvLMmJiYTO/JRx99pNTUVLf3uEqVKho9erQ2btyo2rVr6/nnn8/65LPpoYcekp+fn+vLvqSkJC1YsEDdunXLdC4Aro6n7wG4qis93e1K7cYYSXJ9O/Xpp58qNDQ0U7+/fnOWlZo1a2rbtm26cOFCrj8NJafndDXZSUDS09PVpk0bPfPMM1muz0jAMqxYscI1eemOHTsUHR19zWNcTc+ePTV79mz9+OOPqlOnjr755hs99dRTmZJOADePM2fOqG7duurTp4/uu+++HO1j0KBBWrJkiV5//XXVqVNHJ06cyPLBF4Cn8PX1VePGjdW4cWNVr15dvXv31uzZszVq1Kjr2s+AAQMUFxenwYMHKzo6Wk6nUw6HQw8//LArT8qu9PR01alTR2+++WaW6/9eAPqrjAfG7Nix47qOmV15kVddS8b799prr6levXpZ9gkMDHRbXrJkiSTp8OHDOn78eJb5aXYVL15cnTp10owZM/TCCy/oq6++UmpqKqPPgRygKAUgT1SpUkXS5SfWZIwEuh6dO3fW2rVrNWfOHLfh41kJDw+XJO3Zs0eVK1d2tV+4cEHx8fE5Ov617N27V5UqVXIt79u3T+np6W5PMPy7KlWqKCUlJVvxJCQkaMCAAbrzzjvl6+urYcOGqW3btq5zvZKrFcfatWun4OBgzZgxQ02aNNHZs2fVo0ePa8YCoOBq37692rdvf8X1qampevbZZ/X555/r1KlTioyM1Pjx411PqNq9e7cmTZqknTt3ukar/vWzEfB0Gbd4JSQkuLVnjNT5q19//VWFCxdWcHCwJOmrr75STEyM3njjDVef8+fPZ3oycJUqVbRz586rxlGlShVt375dd9xxx3WPxKlevbpq1Kih+fPn6+23385UrPm78PBw/fTTT0pPT3f74uqXX35xrc9N+/btkzHG7bx+/fVXSbpiXpWRZwYFBWUrr/rggw+0dOlSjRkzRmPHjtU///lPzZ8//6rbXOt97tmzp+6++25t3LhRM2bMUP369VW7du1rxgLAHV+PA8gTbdu2VVBQkF555RVdvHgx0/qsHqP7V0888YTKlCmjf/3rX67E5K8SExP18ssvS5Jat24tX19fvfPOO27fvn388cdKSkpSx44db/BsMnvvvffclt99911Juuofdw8++KDWrl2rxYsXZ1p36tQpXbp0ybX82GOPKT09XR9//LE+/PBD+fj4qG/fvtf8drFIkSKZkt0MPj4+6tq1q7788ktNnTpVderUUVRU1FX3B+Dm1r9/f61du1azZs3STz/9pC5duqhdu3auP8i//fZbVa5cWQsWLFClSpVUsWJFPfroo4yUgsdZvnx5lr9jM+aK/PsUAWvXrnWbF+rQoUOaP3++7rzzTtcIIW9v70z7fPfdd11zTmW4//77tX37ds2bNy/T8TO2f/DBB/XHH39oypQpmfqcO3dOZ86cuer5xcbG6vjx43r00Ufd8o0MS5Ys0YIFCyRJHTp00JEjR/TFF1+41l+6dEnvvvuuAgMDc33OpMOHD7ude3JysqZPn6569epdcTRTw4YNVaVKFb3++utKSUnJtP6veWZ8fLyefvpp3X///fr3v/+t119/Xd98842mT59+1biKFCkiSVfMq9q3b69SpUpp/PjxWrlyJaOkgBxipBSAPBEUFKRJkyapR48eatCggR5++GEFBwfr4MGD+s9//qNmzZpp4sSJV9y+ePHimjdvnjp06KB69eqpe/furglFt2zZos8//9x1O1twcLBGjhyp2NhYtWvXTnfddZf27Nmj999/X40bN86TJCE+Pl533XWX2rVrp7Vr1+qzzz7TI488orp1615xm6efflrffPONOnXqpF69eqlhw4Y6c+aMduzYoa+++kq///67SpUqpbi4OP3nP//R1KlTVb58eUmXk9ju3btr0qRJeuqpp654jIYNG2rSpEl6+eWXVbVqVYWEhLjNGdWzZ0+98847Wr58ucaPH597bwiAAufgwYOKi4vTwYMHVbZsWUnSsGHDtGjRIsXFxemVV17Rb7/9pgMHDmj27NmaPn260tLSNGTIED3wwAP6/vvvbT4DIPsGDBigs2fP6t5771XNmjV14cIF/fjjj/riiy9UsWJF9e7d261/ZGSk2rZtq4EDB8rPz0/vv/++pMvFnwydOnXSp59+KqfTqYiICK1du1bfffedSpYs6bavp59+Wl999ZW6dOmiPn36qGHDhjpx4oS++eYbffDBB6pbt6569OihL7/8Uk888YSWL1+uZs2aKS0tTb/88ou+/PJLLV68+KoTdz/00EPasWOHxowZo61bt6pr164KDw/X8ePHtWjRIi1btsw17+Tjjz+uyZMnq1evXtq8ebMqVqyor776SmvWrNGECROyPWF6dlWvXl19+/bVxo0bVbp0aX3yySc6evSo4uLirriNl5eXPvroI7Vv3161a9dW7969Va5cOf3xxx9avny5goKC9O2338oYoz59+iggIECTJk2SJP3zn//UnDlzNGjQILVu3dr1+fZ3VapUUbFixfTBBx+oaNGiKlKkiJo0aeIaDVqoUCE9/PDDmjhxory9va85sh/AFdj01D8ANujXr5+50o99TEyMCQ8Pdy1nPOb3tddec+uX8Uje2bNnu7XHxcUZSZker7t8+XLTtm1b43Q6jb+/v6lSpYrp1auX22OUr+bw4cNmyJAhpnr16sbf398ULlzYNGzY0IwZM8YkJSW59Z04caKpWbOmKVSokCldurR58sknzcmTJ936tGzZ0tSuXTvTccLDw03Hjh0ztUsy/fr1cy2PGjXKSDK7du0yDzzwgClatKgpXry46d+/vzl37lymfcbExLi1nT592owcOdJUrVrV+Pr6mlKlSpmmTZua119/3Vy4cMEcOnTIOJ1O07lz50yx3HvvvaZIkSLmt99+M8b833seHx/v6nPkyBHTsWNHU7RoUSPJ7dHGGWrXrm28vLzM//73v0zrANy8JJl58+a5lhcsWGAkmSJFiri9fHx8zIMPPmiMMeaxxx4zksyePXtc223evNlIMr/88ovVpwDk2MKFC02fPn1MzZo1TWBgoPH19TVVq1Y1AwYMMEePHnXrm5EbfPbZZ6ZatWrGz8/P1K9f3yxfvtyt38mTJ03v3r1NqVKlTGBgoGnbtq355ZdfsswPjh8/bvr372/KlStnfH19Tfny5U1MTIz5888/XX0uXLhgxo8fb2rXrm38/PxM8eLFTcOGDU1sbGymnOhKli1bZu6++24TEhJifHx8THBwsOncubOZP3++W7+jR4+6Yvf19TV16tQxcXFxbn1yI1fMyL8WL15soqKijJ+fn6lZs2ambTP2+ff3eOvWrea+++4zJUuWNH5+fiY8PNw8+OCDZtmyZcYYY95++20jycyZM8dtu4MHD5qgoCDToUMHV1vLli0z5U3z5883ERERxsfHx0jK9B5s2LDBSDJ33nmnAZAzDmNyYaY5ALhJjB49WrGxsTp27JhKlSpldzg5Ur9+fZUoUULLli2zOxQA+YjD4dC8efN0zz33SJK++OILdevWTT//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jV566SVNnjxZkrR06VLt379f06dPV926ddW8eXNXwpXhiy++UHp6uj766CPVqVNHtWrVUlxcnA4ePKgVK1a4+hUpUkQfffSRateurdq1a2d5Dm+++aaOHTum0NBQRUVF6YknntDChQtd68+cOaNJkybptddeU/v27RUREaEpU6YoICBAH3/8sdu+XnzxRbVp00ZVqlRRuXLlFBgYKB8fH4WGhio0NFQBAQE39oYDAIDrR/4kifwJAIDsYk6pKznwY+Zv+NwYKfmPy/0q3Zrn4URFRbktlylTRomJiVfdZvv27VqzZo1bopSWlqbz58/r7Nmz2rNnj8LCwhQaGupaf8stt2Tax759+1S0aFG39vPnz2v//v2u5Tp16lzzG9qIiAjt3LlTmzdv1po1a7Rq1Sp17txZvXr10kcffaT9+/fr4sWLatasmWubQoUK6ZZbbtHu3bvd9tWoUaOrHgsAANiA/Mm1D/InAACujaLUlaQczd1+N6hQoUJuyw6H46pP2ZGklJQUxcbG6r777su0zt/fP1vHTUlJUcOGDTVjxoxM6zK+UZQuf9OXHV5eXmrcuLEaN26swYMH67PPPlOPHj0yDXu/luweDwAAWIj8ybUP8icAAK6NotSVBJbO3X55rFChQpmeotKgQQPt2bNHVatWzXKbGjVq6NChQzp69KhKl758Hn+dFDNjH1988YVCQkLy5PHRERERki4PPa9SpYp8fX21Zs0ahYeHS7o8J8PGjRs1ePDgq+7H19eXp8gAAGA38ifXPsifAAC4NuaUupLwplJQWUmOK3RwSEHlLvfLBypWrKhly5bpyJEjrkcEv/DCC5o+fbpiY2P1888/a/fu3Zo1a5aee+45SXLNKRATE6OffvpJa9asca1zOC6fd7du3VSqVCndfffdWr16teLj47VixQoNHDhQ//vf/64rxgceeEBvvfWW1q9frwMHDmjFihXq16+fqlevrpo1a6pIkSJ68skn9fTTT2vRokXatWuXHnvsMZ09e1Z9+/a95vnHx8dr27Zt+vPPP5Wamnq9byEAALhR5E+SyJ8AAMguilJX4uUttRv//xf+nlj9/+V24y73ywfeeOMNLV26VGFhYapfv74kqW3btlqwYIGWLFmixo0b6x//+Ifeeust17do3t7e+vrrr5WSkqLGjRvr0UcfdQ0DzxieXrhwYa1atUoV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oQAAQF7Kbq6Ro4nOvby8VK9ePdWrVy+n8QEAANx0wsLCFBYWZncYAAAA+UK2b98DAABAztx///0aP358pvZXX31VXbp0sSEiAAAA+1GUAgAAyGOrVq1Shw4dMrW3b99eq1atsiEiAAAA+1GUAgAAyGMpKSny9fXN1F6oUCElJyfbEBEAAID9KEoBAADksTp16uiLL77I1D5r1ixFRETYEBEAAID9cjTReYZ9+/Zp//79atGihQICAmSMkcPhyK3YAAAACoTnn39e9913n/bv36/bb79dkrRs2TJ9/vnnmj17ts3RAQAA2CNHRanjx4/roYce0vfffy+Hw6G9e/eqcuXK6tu3r4oXL6433ngjt+MEAADwWJ07d9bXX3+tV155RV999ZUCAgIUFRWl7777Ti1btrQ7PAAAAFvk6Pa9IUOGyMfHRwcPHlThwoVd7Q899JAWLVqUa8EBAAAUFB07dtSaNWt05swZ/fnnn/r+++8pSAEAgJtajkZKLVmyRIsXL1b58uXd2qtVq6YDBw7kSmAAAAAAAAAouHJUlDpz5ozbCKkMJ06ckJ+f3w0HBQAAUJCkpaXprbfe0pdffqmDBw/qwoULbutPnDhhU2QAAAD2ydHte7feequmT5/uWnY4HEpPT9err76q2267LdeCAwAAKAhiY2P15ptv6qGHHlJSUpKGDh2q++67T15eXho9erTd4QEAANgiRyOlXn31Vd1xxx3atGmTLly4oGeeeUY///yzTpw4oTVr1uR2jAAAAB5txowZmjJlijp27KjRo0era9euqlKliqKiorRu3ToNHDjQ7hABAAAsl6ORUpGRkfr111/VvHlz3X333Tpz5ozuu+8+bd26VVWqVMntGAEAADzakSNHVKdOHUlSYGCgkpKSJEmdOnXSf/7zHztDAwAAsE2ORkpJktPp1LPPPpubsQAAABRI5cuXV0JCgipUqKAqVapoyZIlatCggTZu3Mh8nAAA4KaV46LU+fPn9dNPPykxMVHp6elu6+66664bDgwAAKCguPfee7Vs2TI1adJEAwYMUPfu3fXxxx/r4MGDGjJkiN3hAQAA2CJHRalFixapZ8+e+vPPPzOtczgcSktLu+HAAAAACopx48a5/v+hhx5ShQoVtHbtWlWrVk2dO3e2MTIAAAD75KgoNWDAAHXp0kUvvPCCSpcundsxAQAAFGjR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ukn5+flp1KhR8vPzszsUZBPXzPNwzTwP18zzcM1gNf7NeR6umefhmnkerplnyU/Xy6MnOgcAAAAAAIBnYqQUAAAAAAAALEdRCgAAAAAAAJajKAUAAAAAAADLUZQqQMaOHavGjRuraNGiCgkJ0T333KM9e/a49Tl//rz69eunkiVLKjAwUPfff7+OHj3q1ufgwYPq2LGjChcurJCQED399NO6dOmSlady0xo3bpwcDocGDx7sauOa5T9//PGHunfvrpIlSyogIEB16tTRpk2bXOuNMXrhhRdUpkwZBQQEqHXr1tq7d6/bPk6cOKFu3bopKChIxYoVU9++fZWSkmL1qdwU0tLS9Pzzz6tSpUoKCAhQlSpV9NJLL+mvUypyzey1atUqde7cWWXLlpXD4dDXX3/ttj63rs9PP/2kW2+9Vf7+/goLC9Orr76a16cGD0EO5dnInzwD+ZNnIX/K/wpM/mRQYLRt29bExcWZnTt3mm3btpkOHTqYChUqmJSUFFefJ554woSFhZlly5aZTZs2mX/84x+madOmrvWXLl0ykZGRpnXr1mbr1q3mv//9rylVqpQZOXKkHad0U9mwYYOpWLGiiYqKMoMGDXK1c83ylxMnTpjw8HDTq1cvs379evPbb7+ZxYsXm3379rn6jBs3zjidTvP111+b7du3m7vuustUqlTJnDt3ztWnXbt2pm7dumbdunVm9erVpmrVqqZr1652nFKBN2bMGFOyZEmzYMECEx8fb2bPnm0CAwPN22+/7erDNbPXf//7X/Pss8+auXPnGklm3rx5butz4/okJSWZ0qVLm27dupmdO3eazz//3AQEBJjJkydbdZrIx8ihPBf5k2cgf/I85E/5X0HJnyhKFWCJiYlGklm5cqUxxphTp06ZQoUKmdmzZ7v67N6920gya9euNcZc/oft5eVljhw54uozadIkExQUZFJTU609gZvI6dOnTbVq1czSpUtNy5YtXUkV1yz/GT58uGnevPkV16enp5vQ0FDz2muvudpOnTpl/Pz8zOeff26MMWbXrl1Gktm4caOrz8KFC43D4TB//PFH3gV/k+rYsaPp06ePW9t9991nunXrZozhmuU3f0+qcuv6vP/++6Z48eJun4vDhw83NWrUyOMzgicih/IM5E+eg/zJ85A/eRZPzp+4fa8AS0pKkiSVKFFCkrR582ZdvHhR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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"GitHub_git_log.ipynb\n",
        "\n",
        "Automatically generated by Colab.\n",
        "\n",
        "Original file is located at\n",
        "    https://colab.research.google.com/drive/1H3DIdSWKSHJlMi2YMpSGlnsClEGY3FF4\n",
        "\n",
        "# **CS5901 - Assignment 2 - Stage 0**\n",
        "*This .py file contains the module for local git and GitHub repository management operations*\n",
        "\"\"\"\n",
        "\n",
        "import os\n",
        "import subprocess\n",
        "import tempfile\n",
        "from google.colab import files\n",
        "import pandas as pd\n",
        "import io\n",
        "\n",
        "\n",
        "# Here, we default to GitHub. To revert to a local git repo uncomment the docstring section below.\n",
        "'''\n",
        "def init_repo(directory, remote_url = None):\n",
        "  \"\"\"\n",
        "  Initialize a local git repo and GitHub remote setup\n",
        "\n",
        "  Args:\n",
        "    directory (str): path to the working directory\n",
        "    remote_url(str, optional): GitHub repo remote URL\n",
        "\n",
        "  Returns:\n",
        "    None\n",
        "  \"\"\"\n",
        "\n",
        "  #Verify if git repo already exists\n",
        "  if not os.path.exists(os.path.join(directory, '.git')):\n",
        "\n",
        "    #Initialize new git repo\n",
        "    subprocess.run(['git', 'init'], cwd = directory, check = True)\n",
        "\n",
        "    #Create .gitignore file with exclusions\n",
        "    with open(os.path.join(directory, '.gitignore'), 'w') as f:\n",
        "      f.write('*csv\\n__pycache__/\\n*.ipynb_checkpoints/')\n",
        "\n",
        "    #Stage and commit .gitignore\n",
        "    subprocess.run(['git', 'add', '.gitignore'], cwd = directory, check = True)\n",
        "    subprocess.run(['git', 'commit', '-m', 'Initial commit'], cwd = directory, check = True)\n",
        "\n",
        "    #Set up remote GitHub repo if URL is provided\n",
        "    if remote_url:\n",
        "      subprocess.run(['git', 'remote', 'add', 'origin', remote_url], cwd = directory, check = True)\n",
        "\n",
        "\n",
        "def commit_changes(directory, message):\n",
        "  \"\"\"\n",
        "  Commit changes to the local git repo and push to GitHub\n",
        "\n",
        "  Args:\n",
        "    directory (str): path to the working directory\n",
        "    message (str): commit message\n",
        "\n",
        "  Returns:\n",
        "    None\n",
        "  \"\"\"\n",
        "\n",
        "  #Stage and commit changes\n",
        "  subprocess.run(['git', 'add', '.'], cwd = directory, check = True)\n",
        "\n",
        "  #Commit with message\n",
        "  subprocess.run(['git', 'commit', '-m', message], cwd = directory, check = True)\n",
        "\n",
        "  #Push changes to GitHub (origin must be set)\n",
        "  try:\n",
        "    subprocess.run(['git', 'push', 'origin', 'main'], cwd = directory, check = True)\n",
        "  except:\n",
        "    print(\"Failed to push to GitHub. Ensure remote is configured and authenticated.\")\n",
        "'''\n",
        "\n",
        "def get_git_log_dataframe(repo_url):\n",
        "    \"\"\"\n",
        "    Clones a Git repository, extracts the log, and returns it as a pandas DataFrame.\n",
        "\n",
        "    Args:\n",
        "        repo_url (str): The URL of the Git repository.\n",
        "\n",
        "    Returns:\n",
        "        pd.DataFrame: A DataFrame containing the git log.\n",
        "    \"\"\"\n",
        "    temp_dir = tempfile.mkdtemp()\n",
        "    print(f\"Created temporary directory: {temp_dir}\")\n",
        "\n",
        "    try:\n",
        "        # Clone the repository\n",
        "        print(f\"Cloning repository from {repo_url}...\")\n",
        "        subprocess.run([\"git\", \"clone\", repo_url, temp_dir], check=True)\n",
        "\n",
        "        # Change to the repository directory\n",
        "        os.chdir(temp_dir)\n",
        "\n",
        "        # Extract the git log\n",
        "        print(\"Extracting git log...\")\n",
        "        log_format = \"%h%x09%an%x09%ad%x09%s\"\n",
        "        result = subprocess.run(\n",
        "            [\"git\", \"log\", f\"--pretty=format:{log_format}\"],\n",
        "            capture_output=True,\n",
        "            text=True,\n",
        "            check=True\n",
        "        )\n",
        "        git_log_content = result.stdout\n",
        "\n",
        "        # Read the git log content into a pandas DataFrame\n",
        "        log_data = io.StringIO(git_log_content)\n",
        "        df = pd.read_csv(log_data, sep='\\t', header=None, names=['Commit Hash', 'Author', 'Date', 'Subject'])\n",
        "\n",
        "        # Display the DataFrame as a table\n",
        "        print(\"Git log in table format:\")\n",
        "        display(df)\n",
        "\n",
        "        # Read the entire file for download (using the content already captured)\n",
        "        content = git_log_content\n",
        "\n",
        "        return df\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n",
        "        return None\n",
        "\n",
        "# Validate usage:\n",
        "repo_url = \"https://github.com/jsp289/CS5901_Assignment2.git\"\n",
        "git_log_df = get_git_log_dataframe(repo_url)\n",
        "\n",
        "if git_log_df is not None:\n",
        "    print(\"\\nDataFrame returned by the function:\")\n",
        "    display(git_log_df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "o51vMmtumeHd",
        "outputId": "5aae6a01-cb7e-4d1c-ce0c-076968da43df"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created temporary directory: /tmp/tmp2a0v36ag\n",
            "Cloning repository from https://github.com/jsp289/CS5901_Assignment2.git...\n",
            "Extracting git log...\n",
            "Git log in table format:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Commit Hash  Author                            Date  \\\n",
              "0      1c4718e  jsp289  Mon May 19 13:28:03 2025 -0400   \n",
              "1      01b8b6f  jsp289  Mon May 12 18:53:58 2025 -0400   \n",
              "2      ce924eb  jsp289  Mon May 12 18:53:14 2025 -0400   \n",
              "3      c309398  jsp289  Mon May 12 12:37:52 2025 -0400   \n",
              "4      9280d24  jsp289  Mon May 12 12:37:40 2025 -0400   \n",
              "5      53ad314  jsp289  Mon May 12 12:37:27 2025 -0400   \n",
              "6      2a969fa  jsp289  Mon May 12 12:37:17 2025 -0400   \n",
              "7      8f718e0  jsp289  Mon May 12 12:36:59 2025 -0400   \n",
              "8      9b2c57f  jsp289  Mon May 12 11:58:23 2025 -0400   \n",
              "9      32ee6bd  jsp289  Mon May 12 11:54:30 2025 -0400   \n",
              "10     0cab392  jsp289  Mon May 12 11:26:00 2025 -0400   \n",
              "11     d795c4f  jsp289  Mon May 12 11:22:20 2025 -0400   \n",
              "12     36d199e  jsp289  Mon May 12 11:21:21 2025 -0400   \n",
              "13     2b97f29  jsp289  Mon May 12 11:19:48 2025 -0400   \n",
              "14     b9e5fda  jsp289  Mon May 12 11:18:11 2025 -0400   \n",
              "15     6fcfa4e  jsp289  Mon May 12 11:18:04 2025 -0400   \n",
              "16     6623e12  jsp289  Mon May 12 11:17:52 2025 -0400   \n",
              "17     ec292b4  jsp289  Mon May 12 11:12:32 2025 -0400   \n",
              "18     3627b1e  jsp289  Mon May 12 11:11:22 2025 -0400   \n",
              "19     0bbb17d  jsp289  Mon May 12 11:09:52 2025 -0400   \n",
              "20     c3ac479  jsp289  Mon May 12 11:07:56 2025 -0400   \n",
              "21     7fa402d  jsp289  Mon May 12 11:07:45 2025 -0400   \n",
              "22     8afc3eb  jsp289  Mon May 12 11:07:36 2025 -0400   \n",
              "23     7872fb3  jsp289  Sun Apr 27 20:11:52 2025 -0400   \n",
              "24     ec644e6  jsp289  Sun Apr 27 20:11:12 2025 -0400   \n",
              "25     4fdde41  jsp289  Sun Apr 27 20:09:37 2025 -0400   \n",
              "26     e1c39a7  jsp289  Sun Apr 27 20:08:37 2025 -0400   \n",
              "27     841852c  jsp289  Sun Apr 27 20:08:26 2025 -0400   \n",
              "28     e51b643  jsp289  Sun Apr 27 20:01:47 2025 -0400   \n",
              "29     c4e129e  jsp289  Sun Apr 27 20:01:37 2025 -0400   \n",
              "30     6df3487  jsp289  Sun Apr 27 20:01:24 2025 -0400   \n",
              "31     0c452e1  jsp289  Sun Apr 27 20:01:13 2025 -0400   \n",
              "32     2165ac0  jsp289  Sun Apr 27 20:00:32 2025 -0400   \n",
              "33     069edbb  jsp289  Sun Apr 27 20:00:19 2025 -0400   \n",
              "34     a1a715c  jsp289  Sun Apr 27 20:00:08 2025 -0400   \n",
              "35     b082a78  jsp289  Sun Apr 27 19:09:07 2025 -0400   \n",
              "36     1b8079b  jsp289  Sun Apr 27 18:59:30 2025 -0400   \n",
              "37     46fba23  jsp289  Sun Apr 27 18:57:11 2025 -0400   \n",
              "38     b2f2c07  jsp289  Sun Apr 27 14:18:11 2025 -0400   \n",
              "39     9768b9d  jsp289  Mon Apr 21 11:27:30 2025 -0400   \n",
              "40     30f8e7d  jsp289  Sun Apr 20 14:46:15 2025 -0400   \n",
              "41     4ce745e  jsp289  Sun Apr 20 14:31:15 2025 -0400   \n",
              "42     0ba7260  jsp289   Fri Apr 4 08:47:29 2025 -0400   \n",
              "43     7ac36f3  jsp289   Wed Apr 2 06:54:59 2025 -0400   \n",
              "44     f98fb53  jsp289  Mon Mar 31 16:44:34 2025 -0400   \n",
              "45     5eac094  jsp289  Sun Mar 30 14:20:00 2025 -0400   \n",
              "46     66f4e79  jsp289  Sun Mar 30 12:58:41 2025 -0400   \n",
              "47     8edf261  jsp289  Sun Mar 30 12:55:50 2025 -0400   \n",
              "48     5e6527f  jsp289  Sun Mar 23 14:43:12 2025 -0400   \n",
              "49     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
              "50     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
              "51     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
              "52     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
              "53     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
              "\n",
              "                                              Subject  \n",
              "0           Unified Py File  - main_run_demo function  \n",
              "1                     Stage 0 - GitHub Commit History  \n",
              "2                       Stage 2 - Complexity Analysis  \n",
              "3       Delete CS5901_assignment2_demo_notebook.ipynb  \n",
              "4   Delete CS5901_assignment2_stage1_data_cleaning...  \n",
              "5        Delete CS5901_assignment2_get_utils_py_py.py  \n",
              "6                Delete CS5901_assignment2_main_py.py  \n",
              "7   Delete CS5901_assignment2_stage2_time_space_co...  \n",
              "8                                 Created using Colab  \n",
              "9                                 Created using Colab  \n",
              "10                                Created using Colab  \n",
              "11                                Created using Colab  \n",
              "12                                Created using Colab  \n",
              "13                                Created using Colab  \n",
              "14    Delete CS5901_assignment2_get_utils_py_py.ipynb  \n",
              "15  Delete CS5901_assignment2_stage1_data_cleaning...  \n",
              "16  Delete CS5901_assignment2_stage2_time_space_co...  \n",
              "17                                Created using Colab  \n",
              "18                                Created using Colab  \n",
              "19                                Created using Colab  \n",
              "20      Delete CS5901__assignment2_get_utils_py_py.py  \n",
              "21  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
              "22  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "23                            Stage 1 - Data Cleaning  \n",
              "24           Module to Extract to Git Log from GitHub  \n",
              "25  Stage 2 - Space & Time Complexity of Various A...  \n",
              "26  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "27  Stage 2 - Space & Time Complexity of Various A...  \n",
              "28  Delete cs5901__assignment2_stage2_time_space_c...  \n",
              "29  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "30  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
              "31  Delete CS5901__assignment2_stage1_1_data_clean...  \n",
              "32           Delete CS5901__assignment2_main_py.ipynb  \n",
              "33         Delete CS5901__assignment2_get_utils_py.py  \n",
              "34      Delete CS5901__assignment2_get_utils_py.ipynb  \n",
              "35                  GitHub API Credentials Revision 4  \n",
              "36                               Get_Utils Revision 3  \n",
              "37         Get GitHub API credentials module renaming  \n",
              "38  This module fetches the git log history from G...  \n",
              "39                            Main Module to Run Demo  \n",
              "40       Stage 2.4  - Summary Results + Scatter Plots  \n",
              "41                       Stage 2.4 - Summary Analysis  \n",
              "42  Stage 2.4 - Summary Space-Time Complexity Anal...  \n",
              "43    Stage 2.3 - String Find Method vs Manual Method  \n",
              "44                      Stage 2.2 - Ordering Integers  \n",
              "45   Stage 2.1 - Standard Matrix Multiplication Sp...  \n",
              "46                  Stage 2 - Space & Time Complexity  \n",
              "47                                Created using Colab  \n",
              "48     Stage 1.5 - Identify and Remove Duplicate Rows  \n",
              "49  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
              "50                Stage 1.3 - Replace missing values.  \n",
              "51  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
              "52  Stage 1.1 - Import CSV data and load in Pandas...  \n",
              "53                               Add files via upload  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7cf1ac6-53fe-45de-bcc9-97ade7791c41\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1c4718e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 19 13:28:03 2025 -0400</td>\n",
              "      <td>Unified Py File  - main_run_demo function</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01b8b6f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:58 2025 -0400</td>\n",
              "      <td>Stage 0 - GitHub Commit History</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ce924eb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:14 2025 -0400</td>\n",
              "      <td>Stage 2 - Complexity Analysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>c309398</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:52 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_demo_notebook.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9280d24</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:40 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage1_data_cleaning...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>53ad314</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:27 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_get_utils_py_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2a969fa</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:17 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_main_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8f718e0</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:36:59 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage2_time_space_co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9b2c57f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:58:23 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>32ee6bd</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:54:30 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0cab392</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:26:00 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>d795c4f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:22:20 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>36d199e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:21:21 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2b97f29</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:19:48 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>b9e5fda</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:18:11 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_get_utils_py_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>6fcfa4e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:18:04 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage1_data_cleaning...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>6623e12</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:17:52 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage2_time_space_co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>ec292b4</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:12:32 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>3627b1e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:11:22 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0bbb17d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:09:52 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>c3ac479</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:56 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>7fa402d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:45 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_data_cleanin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>8afc3eb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:36 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>7872fb3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:11:52 2025 -0400</td>\n",
              "      <td>Stage 1 - Data Cleaning</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>ec644e6</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:11:12 2025 -0400</td>\n",
              "      <td>Module to Extract to Git Log from GitHub</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>4fdde41</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:09:37 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity of Various A...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>e1c39a7</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:08:37 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>841852c</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:08:26 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity of Various A...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>e51b643</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:47 2025 -0400</td>\n",
              "      <td>Delete cs5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>c4e129e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:37 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>6df3487</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:24 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_data_cleanin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>0c452e1</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:13 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_1_data_clean...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2165ac0</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:32 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_main_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>069edbb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:19 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>a1a715c</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:08 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>b082a78</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 19:09:07 2025 -0400</td>\n",
              "      <td>GitHub API Credentials Revision 4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1b8079b</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 18:59:30 2025 -0400</td>\n",
              "      <td>Get_Utils Revision 3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>46fba23</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 18:57:11 2025 -0400</td>\n",
              "      <td>Get GitHub API credentials module renaming</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>b2f2c07</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 14:18:11 2025 -0400</td>\n",
              "      <td>This module fetches the git log history from G...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>9768b9d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Apr 21 11:27:30 2025 -0400</td>\n",
              "      <td>Main Module to Run Demo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>30f8e7d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 20 14:46:15 2025 -0400</td>\n",
              "      <td>Stage 2.4  - Summary Results + Scatter Plots</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>4ce745e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 20 14:31:15 2025 -0400</td>\n",
              "      <td>Stage 2.4 - Summary Analysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0ba7260</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Fri Apr 4 08:47:29 2025 -0400</td>\n",
              "      <td>Stage 2.4 - Summary Space-Time Complexity Anal...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>7ac36f3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Wed Apr 2 06:54:59 2025 -0400</td>\n",
              "      <td>Stage 2.3 - String Find Method vs Manual Method</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>f98fb53</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 31 16:44:34 2025 -0400</td>\n",
              "      <td>Stage 2.2 - Ordering Integers</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>5eac094</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 14:20:00 2025 -0400</td>\n",
              "      <td>Stage 2.1 - Standard Matrix Multiplication Sp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>66f4e79</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 12:58:41 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>8edf261</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 12:55:50 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>5e6527f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:43:12 2025 -0400</td>\n",
              "      <td>Stage 1.5 - Identify and Remove Duplicate Rows</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>20cebef</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:17:57 2025 -0400</td>\n",
              "      <td>Stage 1.4 - Calculate Descriptive Statistics W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>12e6e91</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sat Mar 22 13:23:19 2025 -0400</td>\n",
              "      <td>Stage 1.3 - Replace missing values.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>fd5043e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 13:38:44 2025 -0400</td>\n",
              "      <td>Stage 1.2.1. - Remove negative &amp; outlier rows ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>3fef242</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 12:55:28 2025 -0400</td>\n",
              "      <td>Stage 1.1 - Import CSV data and load in Pandas...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>741ccd3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 16 18:51:36 2025 -0400</td>\n",
              "      <td>Add files via upload</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7cf1ac6-53fe-45de-bcc9-97ade7791c41')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e7cf1ac6-53fe-45de-bcc9-97ade7791c41 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e7cf1ac6-53fe-45de-bcc9-97ade7791c41');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-63608407-d273-445d-a2c0-7a02c8ba1e96\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-63608407-d273-445d-a2c0-7a02c8ba1e96')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-63608407-d273-445d-a2c0-7a02c8ba1e96 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(git_log_df\",\n  \"rows\": 54,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"0bbb17d\",\n          \"20cebef\",\n          \"5e6527f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"Mon May 12 11:09:52 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 43,\n        \"samples\": [\n          \"Stage 1.5 - Identify and Remove Duplicate Rows\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame returned by the function:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Commit Hash  Author                            Date  \\\n",
              "0     1c4718e  jsp289  Mon May 19 13:28:03 2025 -0400   \n",
              "1     01b8b6f  jsp289  Mon May 12 18:53:58 2025 -0400   \n",
              "2     ce924eb  jsp289  Mon May 12 18:53:14 2025 -0400   \n",
              "3     c309398  jsp289  Mon May 12 12:37:52 2025 -0400   \n",
              "4     9280d24  jsp289  Mon May 12 12:37:40 2025 -0400   \n",
              "\n",
              "                                             Subject  \n",
              "0          Unified Py File  - main_run_demo function  \n",
              "1                    Stage 0 - GitHub Commit History  \n",
              "2                      Stage 2 - Complexity Analysis  \n",
              "3      Delete CS5901_assignment2_demo_notebook.ipynb  \n",
              "4  Delete CS5901_assignment2_stage1_data_cleaning...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-164447ce-f94a-4779-b9c4-eae7c1bd963d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1c4718e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 19 13:28:03 2025 -0400</td>\n",
              "      <td>Unified Py File  - main_run_demo function</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01b8b6f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:58 2025 -0400</td>\n",
              "      <td>Stage 0 - GitHub Commit History</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ce924eb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:14 2025 -0400</td>\n",
              "      <td>Stage 2 - Complexity Analysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>c309398</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:52 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_demo_notebook.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9280d24</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:40 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage1_data_cleaning...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-164447ce-f94a-4779-b9c4-eae7c1bd963d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-164447ce-f94a-4779-b9c4-eae7c1bd963d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-164447ce-f94a-4779-b9c4-eae7c1bd963d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-523860e1-7e21-480c-b93d-fa0d818d34ff\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-523860e1-7e21-480c-b93d-fa0d818d34ff')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-523860e1-7e21-480c-b93d-fa0d818d34ff button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    display(git_log_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01b8b6f\",\n          \"9280d24\",\n          \"ce924eb\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Mon May 12 18:53:58 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Stage 0 - GitHub Commit History\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Main_run_demo Function**\n",
        "*This .py file coordinates function calls for the following with GitHub version control from the Python Notebook:*\n",
        "\n",
        "\n",
        "1. Stage 0 - Clone GitHub repo and extract commit history\n",
        "2.   Stage 1 - Loading CSV into Pandas DataFrame, Cleaning Data, and Basic Stats\n",
        "3.   Stage 2 - Calculating the Space-Time Complexity of Several Algorithms\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "By6D94fuqILs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def main_run_demo(file_path, repo_url):\n",
        "    \"\"\"\n",
        "    Executes Stages 0 to 2  of the Demo module with GitHub version control\n",
        "\n",
        "    Args:\n",
        "      file_path (str): url to the csv file\n",
        "      repo_url (str): url to the GitHub repo\n",
        "\n",
        "    Returns:\n",
        "      dict: results of stages 0 to 2 with associated commit messages\n",
        "    \"\"\"\n",
        "\n",
        "    # Stage 0: Get GitHub Commit History\n",
        "    git_log_df = get_git_log_dataframe(repo_url)\n",
        "\n",
        "    #Stage 1: Loading CSV and Cleaning Data:\n",
        "    df = import_data(file_path)\n",
        "    df_cleaned, invalid_rows = remove_nonsensical_rows(df)\n",
        "    df_filled = replace_missing_values(df_cleaned)\n",
        "    manual_stats, pd_stats = calculate_stats(df_filled)\n",
        "    duplicate_data, df_filled_no_duplicates = duplicate_rows(df_filled)\n",
        "\n",
        "    #Stage 2: Space & Time Complexity Analysis\n",
        "    complexity_results, sizes = complexity_analysis(sizes=[100, 500, 1000])\n",
        "\n",
        "    return {\n",
        "        \"clean_data\": df_filled,\n",
        "        \"manual_stats\": manual_stats,\n",
        "        \"pandas_stats\": pd_stats,\n",
        "        \"duplicates\": (duplicate_data,df_filled_no_duplicates),\n",
        "        \"complexity\": (complexity_results,sizes),\n",
        "        \"git_log\": git_log_df,\n",
        "    }\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "  #GitHub info\n",
        "  file_path = 'https://raw.githubusercontent.com/jsp289/CS5901_Assignment2/refs/heads/main/P2data6332.csv'\n",
        "  repo_url = \"https://github.com/jsp289/CS5901_Assignment2.git\"\n",
        "\n",
        "\n",
        "  results = main_run_demo(file_path, repo_url)\n",
        "\n",
        "  #Verify Dict Output of main_run_demo function\n",
        "  print(\"Data loaded and cleaned successfully.\")\n",
        "  print(f\"Duplicates: {results['duplicates']}\")\n",
        "  print(f\"Manual Stats: {results['manual_stats']}\")\n",
        "  print(f\"Pandas Stats: {results['pandas_stats']}\")\n",
        "  print(f\"Complexity Results: {results['complexity']}\")\n",
        "  print(f\"Git Log: {results['git_log']}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6pyI8YsDOS7D",
        "outputId": "7061dbb5-c578-42e7-d274-ae2a77888756"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created temporary directory: /tmp/tmpxdjdr12t\n",
            "Cloning repository from https://github.com/jsp289/CS5901_Assignment2.git...\n",
            "Extracting git log...\n",
            "Git log in table format:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Commit Hash  Author                            Date  \\\n",
              "0      1c4718e  jsp289  Mon May 19 13:28:03 2025 -0400   \n",
              "1      01b8b6f  jsp289  Mon May 12 18:53:58 2025 -0400   \n",
              "2      ce924eb  jsp289  Mon May 12 18:53:14 2025 -0400   \n",
              "3      c309398  jsp289  Mon May 12 12:37:52 2025 -0400   \n",
              "4      9280d24  jsp289  Mon May 12 12:37:40 2025 -0400   \n",
              "5      53ad314  jsp289  Mon May 12 12:37:27 2025 -0400   \n",
              "6      2a969fa  jsp289  Mon May 12 12:37:17 2025 -0400   \n",
              "7      8f718e0  jsp289  Mon May 12 12:36:59 2025 -0400   \n",
              "8      9b2c57f  jsp289  Mon May 12 11:58:23 2025 -0400   \n",
              "9      32ee6bd  jsp289  Mon May 12 11:54:30 2025 -0400   \n",
              "10     0cab392  jsp289  Mon May 12 11:26:00 2025 -0400   \n",
              "11     d795c4f  jsp289  Mon May 12 11:22:20 2025 -0400   \n",
              "12     36d199e  jsp289  Mon May 12 11:21:21 2025 -0400   \n",
              "13     2b97f29  jsp289  Mon May 12 11:19:48 2025 -0400   \n",
              "14     b9e5fda  jsp289  Mon May 12 11:18:11 2025 -0400   \n",
              "15     6fcfa4e  jsp289  Mon May 12 11:18:04 2025 -0400   \n",
              "16     6623e12  jsp289  Mon May 12 11:17:52 2025 -0400   \n",
              "17     ec292b4  jsp289  Mon May 12 11:12:32 2025 -0400   \n",
              "18     3627b1e  jsp289  Mon May 12 11:11:22 2025 -0400   \n",
              "19     0bbb17d  jsp289  Mon May 12 11:09:52 2025 -0400   \n",
              "20     c3ac479  jsp289  Mon May 12 11:07:56 2025 -0400   \n",
              "21     7fa402d  jsp289  Mon May 12 11:07:45 2025 -0400   \n",
              "22     8afc3eb  jsp289  Mon May 12 11:07:36 2025 -0400   \n",
              "23     7872fb3  jsp289  Sun Apr 27 20:11:52 2025 -0400   \n",
              "24     ec644e6  jsp289  Sun Apr 27 20:11:12 2025 -0400   \n",
              "25     4fdde41  jsp289  Sun Apr 27 20:09:37 2025 -0400   \n",
              "26     e1c39a7  jsp289  Sun Apr 27 20:08:37 2025 -0400   \n",
              "27     841852c  jsp289  Sun Apr 27 20:08:26 2025 -0400   \n",
              "28     e51b643  jsp289  Sun Apr 27 20:01:47 2025 -0400   \n",
              "29     c4e129e  jsp289  Sun Apr 27 20:01:37 2025 -0400   \n",
              "30     6df3487  jsp289  Sun Apr 27 20:01:24 2025 -0400   \n",
              "31     0c452e1  jsp289  Sun Apr 27 20:01:13 2025 -0400   \n",
              "32     2165ac0  jsp289  Sun Apr 27 20:00:32 2025 -0400   \n",
              "33     069edbb  jsp289  Sun Apr 27 20:00:19 2025 -0400   \n",
              "34     a1a715c  jsp289  Sun Apr 27 20:00:08 2025 -0400   \n",
              "35     b082a78  jsp289  Sun Apr 27 19:09:07 2025 -0400   \n",
              "36     1b8079b  jsp289  Sun Apr 27 18:59:30 2025 -0400   \n",
              "37     46fba23  jsp289  Sun Apr 27 18:57:11 2025 -0400   \n",
              "38     b2f2c07  jsp289  Sun Apr 27 14:18:11 2025 -0400   \n",
              "39     9768b9d  jsp289  Mon Apr 21 11:27:30 2025 -0400   \n",
              "40     30f8e7d  jsp289  Sun Apr 20 14:46:15 2025 -0400   \n",
              "41     4ce745e  jsp289  Sun Apr 20 14:31:15 2025 -0400   \n",
              "42     0ba7260  jsp289   Fri Apr 4 08:47:29 2025 -0400   \n",
              "43     7ac36f3  jsp289   Wed Apr 2 06:54:59 2025 -0400   \n",
              "44     f98fb53  jsp289  Mon Mar 31 16:44:34 2025 -0400   \n",
              "45     5eac094  jsp289  Sun Mar 30 14:20:00 2025 -0400   \n",
              "46     66f4e79  jsp289  Sun Mar 30 12:58:41 2025 -0400   \n",
              "47     8edf261  jsp289  Sun Mar 30 12:55:50 2025 -0400   \n",
              "48     5e6527f  jsp289  Sun Mar 23 14:43:12 2025 -0400   \n",
              "49     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
              "50     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
              "51     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
              "52     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
              "53     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
              "\n",
              "                                              Subject  \n",
              "0           Unified Py File  - main_run_demo function  \n",
              "1                     Stage 0 - GitHub Commit History  \n",
              "2                       Stage 2 - Complexity Analysis  \n",
              "3       Delete CS5901_assignment2_demo_notebook.ipynb  \n",
              "4   Delete CS5901_assignment2_stage1_data_cleaning...  \n",
              "5        Delete CS5901_assignment2_get_utils_py_py.py  \n",
              "6                Delete CS5901_assignment2_main_py.py  \n",
              "7   Delete CS5901_assignment2_stage2_time_space_co...  \n",
              "8                                 Created using Colab  \n",
              "9                                 Created using Colab  \n",
              "10                                Created using Colab  \n",
              "11                                Created using Colab  \n",
              "12                                Created using Colab  \n",
              "13                                Created using Colab  \n",
              "14    Delete CS5901_assignment2_get_utils_py_py.ipynb  \n",
              "15  Delete CS5901_assignment2_stage1_data_cleaning...  \n",
              "16  Delete CS5901_assignment2_stage2_time_space_co...  \n",
              "17                                Created using Colab  \n",
              "18                                Created using Colab  \n",
              "19                                Created using Colab  \n",
              "20      Delete CS5901__assignment2_get_utils_py_py.py  \n",
              "21  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
              "22  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "23                            Stage 1 - Data Cleaning  \n",
              "24           Module to Extract to Git Log from GitHub  \n",
              "25  Stage 2 - Space & Time Complexity of Various A...  \n",
              "26  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "27  Stage 2 - Space & Time Complexity of Various A...  \n",
              "28  Delete cs5901__assignment2_stage2_time_space_c...  \n",
              "29  Delete CS5901__assignment2_stage2_time_space_c...  \n",
              "30  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
              "31  Delete CS5901__assignment2_stage1_1_data_clean...  \n",
              "32           Delete CS5901__assignment2_main_py.ipynb  \n",
              "33         Delete CS5901__assignment2_get_utils_py.py  \n",
              "34      Delete CS5901__assignment2_get_utils_py.ipynb  \n",
              "35                  GitHub API Credentials Revision 4  \n",
              "36                               Get_Utils Revision 3  \n",
              "37         Get GitHub API credentials module renaming  \n",
              "38  This module fetches the git log history from G...  \n",
              "39                            Main Module to Run Demo  \n",
              "40       Stage 2.4  - Summary Results + Scatter Plots  \n",
              "41                       Stage 2.4 - Summary Analysis  \n",
              "42  Stage 2.4 - Summary Space-Time Complexity Anal...  \n",
              "43    Stage 2.3 - String Find Method vs Manual Method  \n",
              "44                      Stage 2.2 - Ordering Integers  \n",
              "45   Stage 2.1 - Standard Matrix Multiplication Sp...  \n",
              "46                  Stage 2 - Space & Time Complexity  \n",
              "47                                Created using Colab  \n",
              "48     Stage 1.5 - Identify and Remove Duplicate Rows  \n",
              "49  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
              "50                Stage 1.3 - Replace missing values.  \n",
              "51  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
              "52  Stage 1.1 - Import CSV data and load in Pandas...  \n",
              "53                               Add files via upload  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-204e8f99-7926-4345-865a-8e3b993b4096\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Commit Hash</th>\n",
              "      <th>Author</th>\n",
              "      <th>Date</th>\n",
              "      <th>Subject</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1c4718e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 19 13:28:03 2025 -0400</td>\n",
              "      <td>Unified Py File  - main_run_demo function</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01b8b6f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:58 2025 -0400</td>\n",
              "      <td>Stage 0 - GitHub Commit History</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ce924eb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 18:53:14 2025 -0400</td>\n",
              "      <td>Stage 2 - Complexity Analysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>c309398</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:52 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_demo_notebook.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9280d24</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:40 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage1_data_cleaning...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>53ad314</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:27 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_get_utils_py_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2a969fa</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:37:17 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_main_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8f718e0</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 12:36:59 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage2_time_space_co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9b2c57f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:58:23 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>32ee6bd</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:54:30 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0cab392</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:26:00 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>d795c4f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:22:20 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>36d199e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:21:21 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2b97f29</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:19:48 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>b9e5fda</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:18:11 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_get_utils_py_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>6fcfa4e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:18:04 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage1_data_cleaning...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>6623e12</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:17:52 2025 -0400</td>\n",
              "      <td>Delete CS5901_assignment2_stage2_time_space_co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>ec292b4</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:12:32 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>3627b1e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:11:22 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0bbb17d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:09:52 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>c3ac479</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:56 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>7fa402d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:45 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_data_cleanin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>8afc3eb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon May 12 11:07:36 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>7872fb3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:11:52 2025 -0400</td>\n",
              "      <td>Stage 1 - Data Cleaning</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>ec644e6</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:11:12 2025 -0400</td>\n",
              "      <td>Module to Extract to Git Log from GitHub</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>4fdde41</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:09:37 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity of Various A...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>e1c39a7</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:08:37 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>841852c</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:08:26 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity of Various A...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>e51b643</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:47 2025 -0400</td>\n",
              "      <td>Delete cs5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>c4e129e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:37 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage2_time_space_c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>6df3487</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:24 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_data_cleanin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>0c452e1</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:01:13 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_stage1_1_data_clean...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2165ac0</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:32 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_main_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>069edbb</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:19 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py.py</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>a1a715c</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 20:00:08 2025 -0400</td>\n",
              "      <td>Delete CS5901__assignment2_get_utils_py.ipynb</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>b082a78</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 19:09:07 2025 -0400</td>\n",
              "      <td>GitHub API Credentials Revision 4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>1b8079b</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 18:59:30 2025 -0400</td>\n",
              "      <td>Get_Utils Revision 3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>46fba23</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 18:57:11 2025 -0400</td>\n",
              "      <td>Get GitHub API credentials module renaming</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>b2f2c07</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 27 14:18:11 2025 -0400</td>\n",
              "      <td>This module fetches the git log history from G...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>9768b9d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Apr 21 11:27:30 2025 -0400</td>\n",
              "      <td>Main Module to Run Demo</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>30f8e7d</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 20 14:46:15 2025 -0400</td>\n",
              "      <td>Stage 2.4  - Summary Results + Scatter Plots</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>4ce745e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Apr 20 14:31:15 2025 -0400</td>\n",
              "      <td>Stage 2.4 - Summary Analysis</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0ba7260</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Fri Apr 4 08:47:29 2025 -0400</td>\n",
              "      <td>Stage 2.4 - Summary Space-Time Complexity Anal...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>7ac36f3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Wed Apr 2 06:54:59 2025 -0400</td>\n",
              "      <td>Stage 2.3 - String Find Method vs Manual Method</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>f98fb53</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 31 16:44:34 2025 -0400</td>\n",
              "      <td>Stage 2.2 - Ordering Integers</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>5eac094</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 14:20:00 2025 -0400</td>\n",
              "      <td>Stage 2.1 - Standard Matrix Multiplication Sp...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>66f4e79</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 12:58:41 2025 -0400</td>\n",
              "      <td>Stage 2 - Space &amp; Time Complexity</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>8edf261</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 30 12:55:50 2025 -0400</td>\n",
              "      <td>Created using Colab</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>5e6527f</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:43:12 2025 -0400</td>\n",
              "      <td>Stage 1.5 - Identify and Remove Duplicate Rows</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>20cebef</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 23 14:17:57 2025 -0400</td>\n",
              "      <td>Stage 1.4 - Calculate Descriptive Statistics W...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>12e6e91</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sat Mar 22 13:23:19 2025 -0400</td>\n",
              "      <td>Stage 1.3 - Replace missing values.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>fd5043e</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 13:38:44 2025 -0400</td>\n",
              "      <td>Stage 1.2.1. - Remove negative &amp; outlier rows ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>3fef242</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Mon Mar 17 12:55:28 2025 -0400</td>\n",
              "      <td>Stage 1.1 - Import CSV data and load in Pandas...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>741ccd3</td>\n",
              "      <td>jsp289</td>\n",
              "      <td>Sun Mar 16 18:51:36 2025 -0400</td>\n",
              "      <td>Add files via upload</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-204e8f99-7926-4345-865a-8e3b993b4096')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-204e8f99-7926-4345-865a-8e3b993b4096 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-204e8f99-7926-4345-865a-8e3b993b4096');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e301af32-3b30-4ee8-a467-be2bb920a920\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e301af32-3b30-4ee8-a467-be2bb920a920')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e301af32-3b30-4ee8-a467-be2bb920a920 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"  print(f\\\"Git Log: {results['git_log']}\\\")\",\n  \"rows\": 54,\n  \"fields\": [\n    {\n      \"column\": \"Commit Hash\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"0bbb17d\",\n          \"20cebef\",\n          \"5e6527f\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Author\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"jsp289\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"Mon May 12 11:09:52 2025 -0400\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subject\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 43,\n        \"samples\": [\n          \"Stage 1.5 - Identify and Remove Duplicate Rows\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data loaded successfully. Dimensions:(482, 5)\n",
            "The two dataframes are equal (T or F): False\n",
            "Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: []\n",
            "Number of duplicate rows: 0\n",
            "Number of rows after dropping duplicates: 384\n",
            "Data loaded and cleaned successfully.\n",
            "Duplicates: (Empty DataFrame\n",
            "Columns: [Level, T4, T3, T3adjusted, T4adjusted]\n",
            "Index: [],      Level         T4         T3  T3adjusted  T4adjusted\n",
            "0        5   8.100000   2.100000    2.008299    1.280579\n",
            "1        5   8.700000   4.419980    2.056710    1.467960\n",
            "2       20   7.900000   4.600000    1.991632    1.663103\n",
            "3       30   2.300000   0.400000    1.320006    0.736806\n",
            "4       20   5.400000   2.600000    1.754411    1.375069\n",
            "..     ...        ...        ...         ...         ...\n",
            "464     50   1.103030   1.612121    1.033227    1.172553\n",
            "465     50   7.051852  15.348148    1.917643    2.485146\n",
            "467     50  10.905263   3.389474    2.217577    1.502141\n",
            "470    100  27.800000  42.300000    3.029342    3.484283\n",
            "478    150 -13.600000  -4.500000   -2.386966   -1.650964\n",
            "\n",
            "[384 rows x 5 columns])\n",
            "Manual Stats:             Level          T4          T3  T3adjusted  T4adjusted\n",
            "count  384.000000  384.000000  384.000000  384.000000  384.000000\n",
            "mean    28.268229   12.970317   11.609370    2.192149    2.038168\n",
            "std     51.336533    9.345622    9.910619    0.639976    0.679945\n",
            "min      5.000000  -13.600000   -4.500000   -2.386966   -1.650964\n",
            "25%     10.000000    5.905058    4.419980    1.807483    1.557038\n",
            "50%     20.000000   11.071429    8.000000    2.223730    1.995816\n",
            "75%     20.000000   18.425000   15.511765    2.641206    2.461178\n",
            "max    400.000000   41.400000   42.300000    3.459395    3.484283\n",
            "Pandas Stats:             Level          T4          T3  T3adjusted  T4adjusted\n",
            "count  384.000000  384.000000  384.000000  384.000000  384.000000\n",
            "mean    28.268229   12.970317   11.609370    2.192149    2.038168\n",
            "std     51.336533    9.345622    9.910619    0.639976    0.679945\n",
            "min      5.000000  -13.600000   -4.500000   -2.386966   -1.650964\n",
            "25%     10.000000    5.905058    4.419980    1.807483    1.557038\n",
            "50%     20.000000   11.071429    8.000000    2.223730    1.995816\n",
            "75%     20.000000   18.425000   15.511765    2.641206    2.461178\n",
            "max    400.000000   41.400000   42.300000    3.459395    3.484283\n",
            "Complexity Results: ({'matrix_mult': {'time': [0.0012471675872802734, 0.1741495132446289, 2.09356689453125], 'space': [0, 1892352, 7892992]}, 'integer_sort': {'time': [0.0002613067626953125, 0.003911256790161133, 0.0273895263671875], 'space': [0, 0, 0]}, 'string_search': {'time': [2.1696090698242188e-05, 0.0026466846466064453]}}, [100, 500, 1000])\n",
            "Git Log:    Commit Hash  Author                            Date  \\\n",
            "0      1c4718e  jsp289  Mon May 19 13:28:03 2025 -0400   \n",
            "1      01b8b6f  jsp289  Mon May 12 18:53:58 2025 -0400   \n",
            "2      ce924eb  jsp289  Mon May 12 18:53:14 2025 -0400   \n",
            "3      c309398  jsp289  Mon May 12 12:37:52 2025 -0400   \n",
            "4      9280d24  jsp289  Mon May 12 12:37:40 2025 -0400   \n",
            "5      53ad314  jsp289  Mon May 12 12:37:27 2025 -0400   \n",
            "6      2a969fa  jsp289  Mon May 12 12:37:17 2025 -0400   \n",
            "7      8f718e0  jsp289  Mon May 12 12:36:59 2025 -0400   \n",
            "8      9b2c57f  jsp289  Mon May 12 11:58:23 2025 -0400   \n",
            "9      32ee6bd  jsp289  Mon May 12 11:54:30 2025 -0400   \n",
            "10     0cab392  jsp289  Mon May 12 11:26:00 2025 -0400   \n",
            "11     d795c4f  jsp289  Mon May 12 11:22:20 2025 -0400   \n",
            "12     36d199e  jsp289  Mon May 12 11:21:21 2025 -0400   \n",
            "13     2b97f29  jsp289  Mon May 12 11:19:48 2025 -0400   \n",
            "14     b9e5fda  jsp289  Mon May 12 11:18:11 2025 -0400   \n",
            "15     6fcfa4e  jsp289  Mon May 12 11:18:04 2025 -0400   \n",
            "16     6623e12  jsp289  Mon May 12 11:17:52 2025 -0400   \n",
            "17     ec292b4  jsp289  Mon May 12 11:12:32 2025 -0400   \n",
            "18     3627b1e  jsp289  Mon May 12 11:11:22 2025 -0400   \n",
            "19     0bbb17d  jsp289  Mon May 12 11:09:52 2025 -0400   \n",
            "20     c3ac479  jsp289  Mon May 12 11:07:56 2025 -0400   \n",
            "21     7fa402d  jsp289  Mon May 12 11:07:45 2025 -0400   \n",
            "22     8afc3eb  jsp289  Mon May 12 11:07:36 2025 -0400   \n",
            "23     7872fb3  jsp289  Sun Apr 27 20:11:52 2025 -0400   \n",
            "24     ec644e6  jsp289  Sun Apr 27 20:11:12 2025 -0400   \n",
            "25     4fdde41  jsp289  Sun Apr 27 20:09:37 2025 -0400   \n",
            "26     e1c39a7  jsp289  Sun Apr 27 20:08:37 2025 -0400   \n",
            "27     841852c  jsp289  Sun Apr 27 20:08:26 2025 -0400   \n",
            "28     e51b643  jsp289  Sun Apr 27 20:01:47 2025 -0400   \n",
            "29     c4e129e  jsp289  Sun Apr 27 20:01:37 2025 -0400   \n",
            "30     6df3487  jsp289  Sun Apr 27 20:01:24 2025 -0400   \n",
            "31     0c452e1  jsp289  Sun Apr 27 20:01:13 2025 -0400   \n",
            "32     2165ac0  jsp289  Sun Apr 27 20:00:32 2025 -0400   \n",
            "33     069edbb  jsp289  Sun Apr 27 20:00:19 2025 -0400   \n",
            "34     a1a715c  jsp289  Sun Apr 27 20:00:08 2025 -0400   \n",
            "35     b082a78  jsp289  Sun Apr 27 19:09:07 2025 -0400   \n",
            "36     1b8079b  jsp289  Sun Apr 27 18:59:30 2025 -0400   \n",
            "37     46fba23  jsp289  Sun Apr 27 18:57:11 2025 -0400   \n",
            "38     b2f2c07  jsp289  Sun Apr 27 14:18:11 2025 -0400   \n",
            "39     9768b9d  jsp289  Mon Apr 21 11:27:30 2025 -0400   \n",
            "40     30f8e7d  jsp289  Sun Apr 20 14:46:15 2025 -0400   \n",
            "41     4ce745e  jsp289  Sun Apr 20 14:31:15 2025 -0400   \n",
            "42     0ba7260  jsp289   Fri Apr 4 08:47:29 2025 -0400   \n",
            "43     7ac36f3  jsp289   Wed Apr 2 06:54:59 2025 -0400   \n",
            "44     f98fb53  jsp289  Mon Mar 31 16:44:34 2025 -0400   \n",
            "45     5eac094  jsp289  Sun Mar 30 14:20:00 2025 -0400   \n",
            "46     66f4e79  jsp289  Sun Mar 30 12:58:41 2025 -0400   \n",
            "47     8edf261  jsp289  Sun Mar 30 12:55:50 2025 -0400   \n",
            "48     5e6527f  jsp289  Sun Mar 23 14:43:12 2025 -0400   \n",
            "49     20cebef  jsp289  Sun Mar 23 14:17:57 2025 -0400   \n",
            "50     12e6e91  jsp289  Sat Mar 22 13:23:19 2025 -0400   \n",
            "51     fd5043e  jsp289  Mon Mar 17 13:38:44 2025 -0400   \n",
            "52     3fef242  jsp289  Mon Mar 17 12:55:28 2025 -0400   \n",
            "53     741ccd3  jsp289  Sun Mar 16 18:51:36 2025 -0400   \n",
            "\n",
            "                                              Subject  \n",
            "0           Unified Py File  - main_run_demo function  \n",
            "1                     Stage 0 - GitHub Commit History  \n",
            "2                       Stage 2 - Complexity Analysis  \n",
            "3       Delete CS5901_assignment2_demo_notebook.ipynb  \n",
            "4   Delete CS5901_assignment2_stage1_data_cleaning...  \n",
            "5        Delete CS5901_assignment2_get_utils_py_py.py  \n",
            "6                Delete CS5901_assignment2_main_py.py  \n",
            "7   Delete CS5901_assignment2_stage2_time_space_co...  \n",
            "8                                 Created using Colab  \n",
            "9                                 Created using Colab  \n",
            "10                                Created using Colab  \n",
            "11                                Created using Colab  \n",
            "12                                Created using Colab  \n",
            "13                                Created using Colab  \n",
            "14    Delete CS5901_assignment2_get_utils_py_py.ipynb  \n",
            "15  Delete CS5901_assignment2_stage1_data_cleaning...  \n",
            "16  Delete CS5901_assignment2_stage2_time_space_co...  \n",
            "17                                Created using Colab  \n",
            "18                                Created using Colab  \n",
            "19                                Created using Colab  \n",
            "20      Delete CS5901__assignment2_get_utils_py_py.py  \n",
            "21  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
            "22  Delete CS5901__assignment2_stage2_time_space_c...  \n",
            "23                            Stage 1 - Data Cleaning  \n",
            "24           Module to Extract to Git Log from GitHub  \n",
            "25  Stage 2 - Space & Time Complexity of Various A...  \n",
            "26  Delete CS5901__assignment2_stage2_time_space_c...  \n",
            "27  Stage 2 - Space & Time Complexity of Various A...  \n",
            "28  Delete cs5901__assignment2_stage2_time_space_c...  \n",
            "29  Delete CS5901__assignment2_stage2_time_space_c...  \n",
            "30  Delete CS5901__assignment2_stage1_data_cleanin...  \n",
            "31  Delete CS5901__assignment2_stage1_1_data_clean...  \n",
            "32           Delete CS5901__assignment2_main_py.ipynb  \n",
            "33         Delete CS5901__assignment2_get_utils_py.py  \n",
            "34      Delete CS5901__assignment2_get_utils_py.ipynb  \n",
            "35                  GitHub API Credentials Revision 4  \n",
            "36                               Get_Utils Revision 3  \n",
            "37         Get GitHub API credentials module renaming  \n",
            "38  This module fetches the git log history from G...  \n",
            "39                            Main Module to Run Demo  \n",
            "40       Stage 2.4  - Summary Results + Scatter Plots  \n",
            "41                       Stage 2.4 - Summary Analysis  \n",
            "42  Stage 2.4 - Summary Space-Time Complexity Anal...  \n",
            "43    Stage 2.3 - String Find Method vs Manual Method  \n",
            "44                      Stage 2.2 - Ordering Integers  \n",
            "45   Stage 2.1 - Standard Matrix Multiplication Sp...  \n",
            "46                  Stage 2 - Space & Time Complexity  \n",
            "47                                Created using Colab  \n",
            "48     Stage 1.5 - Identify and Remove Duplicate Rows  \n",
            "49  Stage 1.4 - Calculate Descriptive Statistics W...  \n",
            "50                Stage 1.3 - Replace missing values.  \n",
            "51  Stage 1.2.1. - Remove negative & outlier rows ...  \n",
            "52  Stage 1.1 - Import CSV data and load in Pandas...  \n",
            "53                               Add files via upload  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LIkCjWvchW5c"
      },
      "execution_count": 4,
      "outputs": []
    }
  ]
}